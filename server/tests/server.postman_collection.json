{
	"info": {
		"_postman_id": "219dd65f-6e22-4adf-b4cf-f3f951f23895",
		"name": "server",
		"description": "# ðŸš€ Get started here\n\nThis template guides you through CRUD operations (GET, POST, PUT, DELETE), variables, and tests.\n\n## ðŸ”– **How to use this template**\n\n#### **Step 1: Send requests**\n\nRESTful APIs allow you to perform CRUD operations using the POST, GET, PUT, and DELETE HTTP methods.\n\nThis collection contains each of these [request](https://learning.postman.com/docs/sending-requests/requests/) types. Open each request and click \"Send\" to see what happens.\n\n#### **Step 2: View responses**\n\nObserve the response tab for status code (200 OK), response time, and size.\n\n#### **Step 3: Send new Body data**\n\nUpdate or add new data in \"Body\" in the POST request. Typically, Body data is also used in PUT request.\n\n```\n{\n    \"name\": \"Add your name in the body\"\n}\n\n ```\n\n#### **Step 4: Update the variable**\n\nVariables enable you to store and reuse values in Postman. We have created a [variable](https://learning.postman.com/docs/sending-requests/variables/) called `base_url` with the sample request [https://postman-api-learner.glitch.me](https://postman-api-learner.glitch.me). Replace it with your API endpoint to customize this collection.\n\n#### **Step 5: Add tests in the \"Scripts\" tab**\n\nAdding tests to your requests can help you confirm that your API is working as expected. You can write test scripts in JavaScript and view the output in the \"Test Results\" tab.\n\n<img src=\"https://content.pstmn.io/fa30ea0a-373d-4545-a668-e7b283cca343/aW1hZ2UucG5n\" alt=\"\" height=\"1530\" width=\"2162\">\n\n## ðŸ’ª Pro tips\n\n- Use folders to group related requests and organize the collection.\n    \n- Add more [scripts](https://learning.postman.com/docs/writing-scripts/intro-to-scripts/) to verify if the API works as expected and execute workflows.\n    \n\n## ðŸ’¡Related templates\n\n[API testing basics](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9a37a28-055b-49cd-8c7e-97494a21eb54&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[API documentation](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9c28f47-1253-44af-a2f3-20dce4da1f18&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[Authorization methods](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=31a9a6ed-4cdf-4ced-984c-d12c9aec1c27&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "38366801",
		"_collection_link": "https://www.postman.com/group-15/workspace/group-15/collection/38088221-219dd65f-6e22-4adf-b4cf-f3f951f23895?action=share&source=collection_link&creator=38366801"
	},
	"item": [
		{
			"name": "Courses",
			"item": [
				{
					"name": "201 - POST Course in courses",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Declare request- and response data, set environment variable",
									"const requestData = pm.request.body.raw ? JSON.parse(pm.request.body.raw) : {};",
									"const jsonData = pm.response.json()[\"Course\"]; // Course is needed",
									"pm.environment.set(\"course_id\", jsonData.courseID);",
									"",
									"// Set course that does not exist",
									"pm.environment.set(\"not_existing_course_id\", 100_000);",
									"",
									"// Test assertions for HTTP status code",
									"pm.test(\"Status code 201 - created\", () => {",
									"\tpm.response.to.have.status(201);",
									"});",
									"",
									"// Document has all necessary properties",
									"pm.test(\"Response contains all necessary properties and courseID is not 0\", () => {",
									"\tpm.expect(jsonData.courseID).to.be.a('Number').and.not.eql(0);",
									"\tpm.expect(jsonData).to.have.property(\"name\");",
									"\tpm.expect(jsonData).to.have.property(\"topic\");",
									"\tpm.expect(jsonData).to.have.property(\"difficulty\");",
									"\tpm.expect(jsonData).to.have.property(\"description\");",
									"\tpm.expect(jsonData).to.have.property(\"averageRating\");",
									"\tpm.expect(jsonData).to.have.property(\"releaseYear\");",
									"\tpm.expect(jsonData).to.have.property(\"provider\");",
									"\tpm.expect(jsonData).to.have.property(\"instructor\");",
									"\tpm.expect(jsonData).to.have.property(\"certificate\");",
									"\tpm.expect(jsonData).to.have.property(\"accessType\");",
									"\tpm.expect(jsonData).to.have.property(\"photo\");",
									"\tpm.expect(jsonData).to.have.property(\"url\");",
									"});",
									"",
									"// Loop through and compare request data to response data",
									"pm.test(\"Response matches all input data\", () => {",
									"\tObject.keys(requestData).forEach(key => {",
									"\t\tpm.test(`Field matches for: ${key}`, () => {",
									"\t\t\tpm.expect(jsonData[key]).to.eql(requestData[key]);",
									"\t\t});",
									"\t});",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"C Programming for Everybody\",\n  \"topic\": [\"C\", \"C-programming\", \"C-lang\"],\n  \"difficulty\": \"Beginner\",\n  \"description\": \"Course dedicated to understanding computer architecture and low-level programming by studying the 'classic' version of the C Programming language from the 1978 booking by Brian W. Kernighan.\",\n  \"averageRating\": null,\n  \"releaseYear\": 2022,\n  \"provider\": \"FreeCodeCamp\",\n  \"instructor\": \"Dr. Charles R. Severance\",\n  \"certificate\": \"No\",\n  \"accessType\": \"Free\",\n  \"url\": \"https://www.freecodecamp.org/news/complete-c-programming-course-from-dr-chuck/\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/courses",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"courses"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "201 - POST Course #2 in courses",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Declare request- and response data, set environment variable",
									"const requestData = pm.request.body.raw ? JSON.parse(pm.request.body.raw) : {};",
									"const jsonData = pm.response.json()[\"Course\"]; // Course is needed",
									"pm.environment.set(\"course_id2\", jsonData.courseID);",
									"",
									"// Test assertions for HTTP status code",
									"pm.test(\"Status code 201 - created\", () => {",
									"\tpm.response.to.have.status(201);",
									"});",
									"",
									"// Document has all necessary properties",
									"pm.test(\"Response contains all necessary properties and courseID is not 0\", () => {",
									"\tpm.expect(jsonData.courseID).to.be.a('Number').and.not.eql(0);",
									"\tpm.expect(jsonData).to.have.property(\"name\");",
									"\tpm.expect(jsonData).to.have.property(\"topic\");",
									"\tpm.expect(jsonData).to.have.property(\"difficulty\");",
									"\tpm.expect(jsonData).to.have.property(\"description\");",
									"\tpm.expect(jsonData).to.have.property(\"averageRating\");",
									"\tpm.expect(jsonData).to.have.property(\"releaseYear\");",
									"\tpm.expect(jsonData).to.have.property(\"provider\");",
									"\tpm.expect(jsonData).to.have.property(\"instructor\");",
									"\tpm.expect(jsonData).to.have.property(\"certificate\");",
									"\tpm.expect(jsonData).to.have.property(\"accessType\");",
									"\tpm.expect(jsonData).to.have.property(\"photo\");",
									"\tpm.expect(jsonData).to.have.property(\"url\");",
									"});",
									"",
									"// Loop through and compare request data to response data",
									"pm.test(\"Response matches all input data\", () => {",
									"\tObject.keys(requestData).forEach(key => {",
									"\t\tpm.test(`Field matches for: ${key}`, () => {",
									"\t\t\tpm.expect(jsonData[key]).to.eql(requestData[key]);",
									"\t\t});",
									"\t});",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Python Complete Course For Beginners\",\n  \"topic\": [\"Python\"],\n  \"difficulty\": \"Beginner\",\n  \"description\": \"Introduction course to the world of Python.\",\n  \"averageRating\": null,\n  \"releaseYear\": 2023,\n  \"provider\": \"Udemy\",\n  \"instructor\": \"Dennis M. Ritchie\",\n  \"certificate\": \"Yes\",\n  \"accessType\": \"Enrollment\",\n  \"url\": \"www.udemy.com\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/courses",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"courses"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "201 - POST course #3 in courses",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Declare request- and response data, set environment variable",
									"const requestData = pm.request.body.raw ? JSON.parse(pm.request.body.raw) : {};",
									"const jsonData = pm.response.json()[\"Course\"]; // Course is needed",
									"pm.environment.set(\"course_id3\", jsonData.courseID);",
									"",
									"// Test assertions for HTTP status code",
									"pm.test(\"Status code 201 - created\", () => {",
									"\tpm.response.to.have.status(201);",
									"});",
									"",
									"// Document has all necessary properties",
									"pm.test(\"Response contains all necessary properties and courseID is not 0\", () => {",
									"\tpm.expect(jsonData.courseID).to.be.a('Number').and.not.eql(0);",
									"\tpm.expect(jsonData).to.have.property(\"name\");",
									"\tpm.expect(jsonData).to.have.property(\"topic\");",
									"\tpm.expect(jsonData).to.have.property(\"difficulty\");",
									"\tpm.expect(jsonData).to.have.property(\"description\");",
									"\tpm.expect(jsonData).to.have.property(\"averageRating\");",
									"\tpm.expect(jsonData).to.have.property(\"releaseYear\");",
									"\tpm.expect(jsonData).to.have.property(\"provider\");",
									"\tpm.expect(jsonData).to.have.property(\"instructor\");",
									"\tpm.expect(jsonData).to.have.property(\"certificate\");",
									"\tpm.expect(jsonData).to.have.property(\"accessType\");",
									"\tpm.expect(jsonData).to.have.property(\"photo\");",
									"\tpm.expect(jsonData).to.have.property(\"url\");",
									"});",
									"",
									"// Loop through and compare request data to response data",
									"pm.test(\"Response matches all input data\", () => {",
									"\tObject.keys(requestData).forEach(key => {",
									"\t\tpm.test(`Field matches for: ${key}`, () => {",
									"\t\t\tpm.expect(jsonData[key]).to.eql(requestData[key]);",
									"\t\t});",
									"\t});",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Mechanical Engineering for dummies\",\n  \"topic\": [\"Mechanical Engineering\"],\n  \"difficulty\": \"Beginner\",\n  \"description\": \"No prior knowledge in mechanical engineering needed.\",\n  \"averageRating\": null,\n  \"releaseYear\": 2022,\n  \"provider\": \"PluralSight\",\n  \"instructor\": \"Jacob Strong\",\n  \"certificate\": \"No\",\n  \"accessType\": \"Free\",\n  \"url\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/courses",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"courses"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "200 - PATCH Course data in courses",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Declare request- and response data",
									"const jsonData = pm.response.json()[\"updatedCourse\"]; // updatedCourse is needed",
									"const requestData = pm.request.body.raw ? JSON.parse(pm.request.body.raw) : {};",
									"",
									"pm.test(\"Successful PATCH request - status 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Check other fields that should never have null values",
									"pm.test(\"PATCH request kept other field(s) intact\", () => {",
									"\tpm.expect(jsonData.courseID).to.be.a('number').and.not.eql(0);",
									"\tpm.expect(jsonData.name).to.be.a('string').and.is.not.empty;",
									"\tpm.expect(jsonData.topic).to.be.a('array').and.is.not.empty;",
									"\tpm.expect(jsonData.difficulty).to.be.a('string').and.is.not.empty;",
									"\tpm.expect(jsonData.releaseYear).to.be.a('number').and.is.not.eql(0);",
									"\tpm.expect(jsonData.provider).to.be.a('string').and.is.not.empty;",
									"});",
									"",
									"// Loop through and compare request data to response data",
									"pm.test(\"Response matches input data\", () => {",
									"\tObject.keys(requestData).forEach(key => {",
									"\t\tpm.test(`Field matches for: ${key}`, () => {",
									"\t\t\tpm.expect(jsonData[key]).to.eql(requestData[key]);",
									"\t\t});",
									"\t});",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"photo\": \"/src/test2.png\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/courses/{{course_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"courses",
								"{{course_id}}"
							]
						},
						"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "404 - PATCH Course that does not exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"PATCH request status 404 - course not found\", () => {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"photo\": \"/src/test2.png\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/courses/{{not_existing_course_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"courses",
								"{{not_existing_course_id}}"
							]
						},
						"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "200 - PUT Course data in courses",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Declare request- and response data",
									"const jsonData = pm.response.json()[\"updatedCourse\"]; // updatedCourse is needed",
									"const requestData = pm.request.body.raw ? JSON.parse(pm.request.body.raw) : {};",
									"",
									"pm.test(\"Successful PUT request - status 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Check other fields that should never have null values",
									"pm.test(\"PATCH request kept other field(s) intact\", () => {",
									"\tpm.expect(jsonData.courseID).to.be.a('number').and.not.eql(0);",
									"\tpm.expect(jsonData.name).to.be.a('string').and.is.not.empty;",
									"\tpm.expect(jsonData.topic).to.be.a('array').and.is.not.empty;",
									"\tpm.expect(jsonData.difficulty).to.be.a('string').and.is.not.empty;",
									"\tpm.expect(jsonData.releaseYear).to.be.a('number').and.is.not.eql(0);",
									"\tpm.expect(jsonData.provider).to.be.a('string').and.is.not.empty;",
									"});",
									"",
									"// Loop through and compare request data to response data",
									"pm.test(\"Response matches input data\", () => {",
									"\tObject.keys(requestData).forEach(key => {",
									"\t\tpm.test(`Field matches for: ${key}`, () => {",
									"\t\t\tpm.expect(jsonData[key]).to.eql(requestData[key]);",
									"\t\t});",
									"\t});",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"photo\": \"/src/test3.png\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/courses/{{course_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"courses",
								"{{course_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "404 - PUT Course that does not exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"PUT request status 404 - course not found\", () => {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"photo\": \"/src/test3.png\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/courses/{{not_existing_course_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"courses",
								"{{not_existing_course_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 - GET all courses",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Declare response data",
									"const jsonData = pm.response.json()[\"courses\"]; // courses is needed",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"jsonData.forEach((course) => {",
									"\tpm.test(`Check courseID: ${course.courseID}`, () => {",
									"\t\tpm.expect(course.courseID).to.be.a('number').and.not.eql(0);",
									"\t\tpm.expect(course).to.have.property(\"name\");",
									"\t\tpm.expect(course).to.have.property(\"name\");",
									"\t\tpm.expect(course).to.have.property(\"topic\");",
									"\t\tpm.expect(course).to.have.property(\"difficulty\");",
									"\t\tpm.expect(course).to.have.property(\"description\");",
									"\t\tpm.expect(course).to.have.property(\"averageRating\");",
									"\t\tpm.expect(course).to.have.property(\"releaseYear\");",
									"\t\tpm.expect(course).to.have.property(\"provider\");",
									"\t\tpm.expect(course).to.have.property(\"instructor\");",
									"\t\tpm.expect(course).to.have.property(\"certificate\");",
									"\t\tpm.expect(course).to.have.property(\"accessType\");",
									"\t\tpm.expect(course).to.have.property(\"photo\");",
									"\t\tpm.expect(course).to.have.property(\"url\");",
									"\t});",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "host",
								"value": "http://localhost:3000",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/courses",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"courses"
							],
							"query": [
								{
									"key": "host",
									"value": "l",
									"disabled": true
								}
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "200 - GET specific Course",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Declare response data",
									"const jsonData = pm.response.json()[\"course\"]; // course is needed",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Document has all necessary properties",
									"pm.test(\"Response contains all necessary properties and courseID is not 0\", () => {",
									"\tpm.expect(jsonData.courseID).to.be.a('Number').and.not.eql(0);",
									"\tpm.expect(jsonData).to.have.property(\"name\");",
									"\tpm.expect(jsonData).to.have.property(\"topic\");",
									"\tpm.expect(jsonData).to.have.property(\"difficulty\");",
									"\tpm.expect(jsonData).to.have.property(\"description\");",
									"\tpm.expect(jsonData).to.have.property(\"averageRating\");",
									"\tpm.expect(jsonData).to.have.property(\"releaseYear\");",
									"\tpm.expect(jsonData).to.have.property(\"provider\");",
									"\tpm.expect(jsonData).to.have.property(\"instructor\");",
									"\tpm.expect(jsonData).to.have.property(\"certificate\");",
									"\tpm.expect(jsonData).to.have.property(\"accessType\");",
									"\tpm.expect(jsonData).to.have.property(\"photo\");",
									"\tpm.expect(jsonData).to.have.property(\"url\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{host}}/api/courses/{{course_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"courses",
								"{{course_id}}"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "404 - GET Course that doest not exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"GET request status 404 - course not found\", () => {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{host}}/api/courses/{{not_existing_course_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"courses",
								"{{not_existing_course_id}}"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "200 - DELETE Course from courses",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/courses/{{course_id3}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"courses",
								"{{course_id3}}"
							]
						},
						"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "404 - DELETE Course that does not exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"DELETE request status 404 - course not found\", () => {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/courses/{{not_existing_course_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"courses",
								"{{not_existing_course_id}}"
							]
						},
						"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
					},
					"response": []
				}
			]
		},
		{
			"name": "Users",
			"item": [
				{
					"name": "201 - POST User #1 to users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Declare request- and response data, set environment variable",
									"const requestData = pm.request.body.raw ? JSON.parse(pm.request.body.raw) : {};",
									"const jsonData = pm.response.json()[\"User\"]; // User is needed",
									"pm.environment.set(\"user_id\", jsonData.userID);",
									"",
									"// Set env variable for user that does not exist",
									"pm.environment.set(\"not_existing_user_id\", 100_000);",
									"",
									"// Test assertions for HTTP status code",
									"pm.test(\"Status code 201 - created\", () => {",
									"\tpm.response.to.have.status(201);",
									"});",
									"",
									"// Document has all necessary properties",
									"pm.test(\"Response contains all necessary properties and id is not 0\", () => {",
									"\tpm.expect(jsonData.userID).to.be.a('Number').and.not.eql(0);",
									"\tpm.expect(jsonData).to.have.property(\"username\");",
									"\tpm.expect(jsonData).to.have.property(\"email\");",
									"\tpm.expect(jsonData).to.have.property(\"password\");",
									"\tpm.expect(jsonData).to.have.property(\"photo\");",
									"\tpm.expect(jsonData).to.have.property(\"interests\");",
									"\tpm.expect(jsonData).to.have.property(\"recommendationList\");",
									"\tpm.expect(jsonData).to.have.property(\"courseLists\");",
									"});",
									"",
									"// Loop through and compare request data to response data",
									"pm.test(\"Response matches all input data\", () => {",
									"\tObject.keys(requestData).forEach(key => {",
									"\t\tpm.test(`Field matches for: ${key}`, () => {",
									"\t\t\tpm.expect(jsonData[key]).to.eql(requestData[key]);",
									"\t\t});",
									"\t});",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"mrBagel#34\",\n    \"email\": \"mrbagel_34@gmail.com\",\n    \"password\": \"Sunshine34\",\n    \"interests\": [\"Fishing\", \"Programming\"],\n    \"courseLists\": [1]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "201 - POST User #2 to users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Declare request- and response data, set environment variable",
									"const requestData = pm.request.body.raw ? JSON.parse(pm.request.body.raw) : {};",
									"const jsonData = pm.response.json()[\"User\"]; // User is needed",
									"pm.environment.set(\"user_id2\", jsonData.userID);",
									"",
									"// Test assertions for HTTP status code",
									"pm.test(\"Status code 201 - created\", () => {",
									"\tpm.response.to.have.status(201);",
									"});",
									"",
									"// Document has all necessary properties",
									"pm.test(\"Response contains all necessary properties and id is not 0\", () => {",
									"\tpm.expect(jsonData.userID).to.be.a('Number').and.not.eql(0);",
									"\tpm.expect(jsonData).to.have.property(\"username\");",
									"\tpm.expect(jsonData).to.have.property(\"email\");",
									"\tpm.expect(jsonData).to.have.property(\"password\");",
									"\tpm.expect(jsonData).to.have.property(\"photo\");",
									"\tpm.expect(jsonData).to.have.property(\"interests\");",
									"\tpm.expect(jsonData).to.have.property(\"recommendationList\");",
									"\tpm.expect(jsonData).to.have.property(\"courseLists\");",
									"});",
									"",
									"// Loop through and compare request data to response data",
									"pm.test(\"Response matches all input data\", () => {",
									"\tObject.keys(requestData).forEach(key => {",
									"\t\tpm.test(`Field matches for: ${key}`, () => {",
									"\t\t\tpm.expect(jsonData[key]).to.eql(requestData[key]);",
									"\t\t});",
									"\t});",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"raymondQ2\",\n    \"email\": \"raymondqt@outlook.com\",\n    \"password\": \"raymondisthebest\",\n    \"photo\": null,\n    \"interests\": [\"History\", \"Mechanical Engineering\"]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "201 - POST User #3 to users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Declare request- and response data, set environment variable",
									"const requestData = pm.request.body.raw ? JSON.parse(pm.request.body.raw) : {};",
									"const jsonData = pm.response.json()[\"User\"]; // User is needed",
									"pm.environment.set(\"user_id3\", jsonData.userID);",
									"",
									"// Test assertions for HTTP status code",
									"pm.test(\"Status code 201 - created\", () => {",
									"\tpm.response.to.have.status(201);",
									"});",
									"",
									"// Document has all necessary properties",
									"pm.test(\"Response contains all necessary properties and id is not 0\", () => {",
									"\tpm.expect(jsonData.userID).to.be.a('Number').and.not.eql(0);",
									"\tpm.expect(jsonData).to.have.property(\"username\");",
									"\tpm.expect(jsonData).to.have.property(\"email\");",
									"\tpm.expect(jsonData).to.have.property(\"password\");",
									"\tpm.expect(jsonData).to.have.property(\"photo\");",
									"\tpm.expect(jsonData).to.have.property(\"interests\");",
									"\tpm.expect(jsonData).to.have.property(\"recommendationList\");",
									"\tpm.expect(jsonData).to.have.property(\"courseLists\");",
									"});",
									"",
									"// Loop through and compare request data to response data",
									"pm.test(\"Response matches all input data\", () => {",
									"\tObject.keys(requestData).forEach(key => {",
									"\t\tpm.test(`Field matches for: ${key}`, () => {",
									"\t\t\tpm.expect(jsonData[key]).to.eql(requestData[key]);",
									"\t\t});",
									"\t});",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"theodoraSmythe\",\n    \"email\": \"theosmythe@outlook.com\",\n    \"password\": \"aaron2104\",\n    \"photo\": null,\n    \"interests\": [\"Dancing\", \"Theology\"]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "200 - PATCH User data in users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Declare request- and response data",
									"const jsonData = pm.response.json();",
									"const requestData = pm.request.body.raw ? JSON.parse(pm.request.body.raw) : {};",
									"",
									"pm.test(\"Successful PATCH request - status 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Check other fields that should never have null values",
									"pm.test(\"PATCH request kept other field(s) intact\", () => {",
									"\tpm.expect(jsonData.userID).to.be.a('number').and.not.eql(0);",
									"\tpm.expect(jsonData.username).to.be.a('string').and.is.not.empty;",
									"\tpm.expect(jsonData.email).to.be.a('string').and.is.not.empty;",
									"\tpm.expect(jsonData.password).to.be.a('string').and.is.not.empty;",
									"});",
									"",
									"// Loop through and compare request data to response data",
									"pm.test(\"Response matches input data\", () => {",
									"\tObject.keys(requestData).forEach(key => {",
									"        console.log(requestData[key], jsonData[key]);",
									"\t\tpm.test(`Field matches for: ${key}`, () => {",
									"\t\t\tpm.expect(jsonData[key]).to.eql(requestData[key]);",
									"\t\t});",
									"\t});",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"photo\": \"/src/test2.png\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/users/{{user_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users",
								"{{user_id}}"
							]
						},
						"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "404 - PATCH User that does not exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"PATCH request status 404 - user does not exist\", () => {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"photo\": \"/src/test2.png\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/users/{{not_existing_user_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users",
								"{{not_existing_user_id}}"
							]
						},
						"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "200 - PUT User data in users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Declare request- and response data",
									"const jsonData = pm.response.json();",
									"const requestData = pm.request.body.raw ? JSON.parse(pm.request.body.raw) : {};",
									"",
									"pm.test(\"Successful PUT request - status 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Check other fields that should never have null values",
									"pm.test(\"PATCH request kept other field(s) intact\", () => {",
									"\tpm.expect(jsonData.userID).to.be.a('number').and.not.eql(0);",
									"\tpm.expect(jsonData.username).to.be.a('string').and.is.not.empty;",
									"\tpm.expect(jsonData.email).to.be.a('string').and.is.not.empty;",
									"\tpm.expect(jsonData.password).to.be.a('string').and.is.not.empty;",
									"});",
									"",
									"// Loop through and compare request data to response data",
									"pm.test(\"Response matches input data\", () => {",
									"\tObject.keys(requestData).forEach(key => {",
									"\t\tpm.test(`Field matches for: ${key}`, () => {",
									"\t\t\tpm.expect(jsonData[key]).to.eql(requestData[key]);",
									"\t\t});",
									"\t});",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"photo\": null\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/users/{{user_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users",
								"{{user_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "404 - PUT User that does not exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"PUT request status 404 - user not found\", () => {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"photo\": null\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/users/{{not_existing_user_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users",
								"{{not_existing_user_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 - GET all users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Declare response data",
									"const jsonData = pm.response.json()[\"users\"]; // users is needed",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"jsonData.forEach((user) => {",
									"\tpm.test(`Check userID: ${user.userID}`, () => {",
									"\t\tpm.expect(user.userID).to.be.a('number').and.not.eql(0);",
									"\t\tpm.expect(user).to.have.property(\"username\");",
									"\t\tpm.expect(user).to.have.property(\"email\");",
									"\t\tpm.expect(user).to.have.property(\"password\");",
									"\t\tpm.expect(user).to.have.property(\"photo\");",
									"\t\tpm.expect(user).to.have.property(\"interests\");",
									"\t\tpm.expect(user).to.have.property(\"recommendationList\");",
									"\t\tpm.expect(user).to.have.property(\"courseLists\");",
									"\t});",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/api/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 - GET specific User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Declare response data",
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Document has all necessary properties",
									"pm.test(\"Response contains all necessary properties and courseID is not 0\", () => {",
									"\tpm.expect(jsonData.userID).to.be.a('Number').and.not.eql(0);",
									"\tpm.expect(jsonData).to.have.property(\"username\");",
									"\tpm.expect(jsonData).to.have.property(\"email\");",
									"\tpm.expect(jsonData).to.have.property(\"password\");",
									"\tpm.expect(jsonData).to.have.property(\"photo\");",
									"\tpm.expect(jsonData).to.have.property(\"interests\");",
									"\tpm.expect(jsonData).to.have.property(\"recommendationList\");",
									"\tpm.expect(jsonData).to.have.property(\"courseLists\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/users/{{user_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users",
								"{{user_id}}"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "404 - GET User that does not exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Status code is 404 - user does not exist\", () => {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/users/{{not_existing_user_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users",
								"{{not_existing_user_id}}"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "200 - DELETE User from users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful DELETE request - status 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/users/{{user_id3}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users",
								"{{user_id3}}"
							]
						},
						"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "404 - DELETE User that does not exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"DELETE request status 404 - user does not exist\", () => {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/users/{{not_existing_user_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users",
								"{{not_existing_user_id}}"
							]
						},
						"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
					},
					"response": []
				}
			]
		},
		{
			"name": "Reviews",
			"item": [
				{
					"name": "201 - POST Review #1 to reviews",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Declare request- and response data, set environment variable",
									"const requestData = pm.request.body.raw ? JSON.parse(pm.request.body.raw) : {};",
									"const jsonData = pm.response.json();",
									"",
									"if (jsonData.error) {",
									"\tpm.test(\"Status code 400\", () => {",
									"\t\tpm.response.to.have.status(400);",
									"\t})",
									"\treturn",
									"}",
									"",
									"const reviewData = jsonData[\"Review\"]; // Review is needed",
									"pm.environment.set(\"review_id\", reviewData.reviewID);",
									"",
									"// Set a review that does not exist",
									"pm.environment.set(\"not_existing_review_id\", 100_000);",
									"",
									"// Test assertions for HTTP status code",
									"pm.test(\"Status code 201 - created\", () => {",
									"\tpm.response.to.have.status(201);",
									"});",
									"",
									"// Document has all necessary properties",
									"pm.test(\"Response contains all necessary properties and id is not 0\", () => {",
									"\tpm.expect(reviewData.reviewID).to.be.a('Number').and.not.eql(0);",
									"\tpm.expect(reviewData).to.have.property(\"user\");",
									"\tpm.expect(reviewData).to.have.property(\"course\");",
									"\tpm.expect(reviewData).to.have.property(\"rating\");",
									"\tpm.expect(reviewData).to.have.property(\"date\");",
									"\tpm.expect(reviewData).to.have.property(\"comment\");",
									"\tpm.expect(reviewData).to.have.property(\"hasCompleted\");",
									"});",
									"",
									"// Loop through and compare request data to response data",
									"pm.test(\"Response matches all input data\", () => {",
									"\tObject.keys(requestData).forEach(key => {",
									"\t\tpm.test(`Field matches for: ${key}`, () => {",
									"\t\t\tpm.expect(reviewData[key]).to.eql(requestData[key]);",
									"\t\t});",
									"\t});",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"rating\": [4, 4, 3, 4],\n    \"comment\": \"Simple but effective course!\",\n    \"hasCompleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/users/{{user_id}}/courses/{{course_id}}/reviews",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users",
								"{{user_id}}",
								"courses",
								"{{course_id}}",
								"reviews"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "201 - POST Review #2 to reviews",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Declare request- and response data, set environment variable",
									"const requestData = pm.request.body.raw ? JSON.parse(pm.request.body.raw) : {};",
									"const jsonData = pm.response.json();",
									"",
									"if (jsonData.error) {",
									"\tpm.test(\"Status code 400\", () => {",
									"\t\tpm.response.to.have.status(400);",
									"\t})",
									"\treturn",
									"}",
									"",
									"const reviewData = jsonData[\"Review\"]; // Review is needed",
									"pm.environment.set(\"review_id2\", reviewData.reviewID);",
									"",
									"// Test assertions for HTTP status code",
									"pm.test(\"Status code 201 - created\", () => {",
									"\tpm.response.to.have.status(201);",
									"});",
									"",
									"// Document has all necessary properties",
									"pm.test(\"Response contains all necessary properties and id is not 0\", () => {",
									"\tpm.expect(reviewData.reviewID).to.be.a('Number').and.not.eql(0);",
									"\tpm.expect(reviewData).to.have.property(\"user\");",
									"\tpm.expect(reviewData).to.have.property(\"course\");",
									"\tpm.expect(reviewData).to.have.property(\"rating\");",
									"\tpm.expect(reviewData).to.have.property(\"date\");",
									"\tpm.expect(reviewData).to.have.property(\"comment\");",
									"\tpm.expect(reviewData).to.have.property(\"hasCompleted\");",
									"});",
									"",
									"// Loop through and compare request data to response data",
									"pm.test(\"Response matches all input data\", () => {",
									"\tObject.keys(requestData).forEach(key => {",
									"\t\tpm.test(`Field matches for: ${key}`, () => {",
									"\t\t\tpm.expect(reviewData[key]).to.eql(requestData[key]);",
									"\t\t});",
									"\t});",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"rating\": [2, 3, 5, 4],\n    \"comment\": \"Simple but effective course!\",\n    \"hasCompleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/users/{{user_id2}}/courses/{{course_id2}}/reviews",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users",
								"{{user_id2}}",
								"courses",
								"{{course_id2}}",
								"reviews"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "201 - POST Review #3 to reviews",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Declare request- and response data, set environment variable",
									"const requestData = pm.request.body.raw ? JSON.parse(pm.request.body.raw) : {};",
									"const jsonData = pm.response.json();",
									"",
									"if (jsonData.error) {",
									"\tpm.test(\"Status code 400\", () => {",
									"\t\tpm.response.to.have.status(400);",
									"\t})",
									"\treturn",
									"}",
									"",
									"const reviewData = jsonData[\"Review\"]; // Review is needed",
									"pm.environment.set(\"review_id3\", reviewData.reviewID);",
									"",
									"// Test assertions for HTTP status code",
									"pm.test(\"Status code 201 - created\", () => {",
									"\tpm.response.to.have.status(201);",
									"});",
									"",
									"// Document has all necessary properties",
									"pm.test(\"Response contains all necessary properties and id is not 0\", () => {",
									"\tpm.expect(reviewData.reviewID).to.be.a('Number').and.not.eql(0);",
									"\tpm.expect(reviewData).to.have.property(\"user\");",
									"\tpm.expect(reviewData).to.have.property(\"course\");",
									"\tpm.expect(reviewData).to.have.property(\"rating\");",
									"\tpm.expect(reviewData).to.have.property(\"date\");",
									"\tpm.expect(reviewData).to.have.property(\"comment\");",
									"\tpm.expect(reviewData).to.have.property(\"hasCompleted\");",
									"});",
									"",
									"// Loop through and compare request data to response data",
									"pm.test(\"Response matches all input data\", () => {",
									"\tObject.keys(requestData).forEach(key => {",
									"\t\tpm.test(`Field matches for: ${key}`, () => {",
									"\t\t\tpm.expect(reviewData[key]).to.eql(requestData[key]);",
									"\t\t});",
									"\t});",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"rating\": [3, 3, 1, 3],\n    \"comment\": \"Intersting and good course!\",\n    \"hasCompleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/users/{{user_id3}}/courses/{{course_id3}}/reviews",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users",
								"{{user_id3}}",
								"courses",
								"{{course_id3}}",
								"reviews"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "400 - POST Review w/o User & Course",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code 400 - userID and/or courseID missing\", () => {",
									"    pm.response.to.have.status(400);",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"rating\": [3, 3, 1, 3],\n    \"comment\": \"Intersting and good course!\",\n    \"hasCompleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/reviews",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"reviews"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "400 - POST Review w/o User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code 400 - userID missing\", () => {",
									"    pm.response.to.have.status(400);",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"rating\": [3, 3, 1, 3],\n    \"comment\": \"Intersting and good course!\",\n    \"hasCompleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/courses/{{course_id}}/reviews",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"courses",
								"{{course_id}}",
								"reviews"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "400 - POST Review w/o Course",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code 400 - courseID missing\", () => {",
									"    pm.response.to.have.status(400);",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"rating\": [3, 3, 1, 3],\n    \"comment\": \"Intersting and good course!\",\n    \"hasCompleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/users/{{user_id}}/reviews",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users",
								"{{user_id}}",
								"reviews"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "200 - PATCH Review data in reviews",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Declare request- and response data",
									"const jsonData = pm.response.json()['review'];",
									"const requestData = pm.request.body.raw ? JSON.parse(pm.request.body.raw) : {};",
									"",
									"pm.test(\"Successful PATCH request - status 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Check other fields that should never have null values",
									"pm.test(\"PATCH request kept other field(s) intact\", () => {",
									"\tpm.expect(jsonData.reviewID).to.be.a('number').and.not.eql(0);",
									"\tpm.expect(jsonData.user).to.be.a('number').and.is.not.eql(0);",
									"\tpm.expect(jsonData.course).to.be.a('number').and.is.not.eql(0);",
									"\tpm.expect(jsonData.rating).to.be.a('array').and.is.not.empty;",
									"});",
									"",
									"// Loop through and compare request data to response data",
									"pm.test(\"Response matches input data\", () => {",
									"\tObject.keys(requestData).forEach(key => {",
									"        console.log(requestData[key], jsonData[key]);",
									"\t\tpm.test(`Field matches for: ${key}`, () => {",
									"\t\t\tpm.expect(jsonData[key]).to.eql(requestData[key]);",
									"\t\t});",
									"\t});",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"rating\": [2, 1, 2, 2],\n    \"comment\": \"Simple but effective course!\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/users/{{user_id}}/courses/{{course_id}}/reviews/{{review_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users",
								"{{user_id}}",
								"courses",
								"{{course_id}}",
								"reviews",
								"{{review_id}}"
							]
						},
						"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "404 - PATCH Review that does not exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"PATCH request status 404 - review not found\", () => {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"rating\": [2, 1, 2, 2],\n    \"comment\": \"Simple but effective course!\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/users/{{user_id}}/courses/{{course_id}}/reviews/{{not_existing_review_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users",
								"{{user_id}}",
								"courses",
								"{{course_id}}",
								"reviews",
								"{{not_existing_review_id}}"
							]
						},
						"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "200 - PUT Review data in reviews",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Declare request- and response data",
									"const jsonData = pm.response.json()['review'];",
									"const requestData = pm.request.body.raw ? JSON.parse(pm.request.body.raw) : {};",
									"",
									"pm.test(\"Successful PUT request - status 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Check other fields that should never have null values",
									"pm.test(\"PATCH request kept other field(s) intact\", () => {",
									"\tpm.expect(jsonData.reviewID).to.be.a('number').and.not.eql(0);",
									"\tpm.expect(jsonData.user).to.be.a('number').and.is.not.eql(0);",
									"\tpm.expect(jsonData.course).to.be.a('number').and.is.not.eql(0);",
									"\tpm.expect(jsonData.rating).to.be.a('array').and.is.not.empty;",
									"});",
									"",
									"// Loop through and compare request data to response data",
									"pm.test(\"Response matches input data\", () => {",
									"\tObject.keys(requestData).forEach(key => {",
									"\t\tpm.test(`Field matches for: ${key}`, () => {",
									"\t\t\tpm.expect(jsonData[key]).to.eql(requestData[key]);",
									"\t\t});",
									"\t});",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"rating\": [5, 4, 2, 2]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/users/{{user_id}}/courses/{{course_id}}/reviews/{{review_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users",
								"{{user_id}}",
								"courses",
								"{{course_id}}",
								"reviews",
								"{{review_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "404 - PUT Review that does not exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"PUT request status 404 - review not found\", () => {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"rating\": [5, 4, 2, 2]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/users/{{user_id}}/courses/{{course_id}}/reviews/{{not_existing_review_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users",
								"{{user_id}}",
								"courses",
								"{{course_id}}",
								"reviews",
								"{{not_existing_review_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 - GET all reviews",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Declare response data",
									"const jsonData = pm.response.json()[\"reviews\"]; // reviews is needed",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"jsonData.forEach((review) => {",
									"\tpm.test(`Check all properties for reviewID: ${review.reviewID}`, () => {",
									"\t\tpm.expect(review.reviewID).to.be.a('number').and.not.eql(0);",
									"\t\tpm.expect(review).to.have.property(\"user\");",
									"\t\tpm.expect(review).to.have.property(\"course\");",
									"\t\tpm.expect(review).to.have.property(\"rating\");",
									"\t\tpm.expect(review).to.have.property(\"date\");",
									"\t\tpm.expect(review).to.have.property(\"comment\");",
									"\t\tpm.expect(review).to.have.property(\"hasCompleted\");",
									"\t});",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/reviews",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"reviews"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 - GET all reviews of a Course",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Declare response data",
									"const jsonData = pm.response.json()[\"reviews\"]; // reviews is needed",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const course_id = Number(pm.environment.get('course_id'));",
									"",
									"jsonData.forEach((review) => {",
									"\tpm.test(`Check all properties for reviewID: ${review.reviewID} and connected to courseID: ${course_id}`, () => {",
									"\t\tpm.expect(review.reviewID).to.be.a('number').and.not.eql(0);",
									"\t\tpm.expect(review).to.have.property(\"user\");",
									"\t\tpm.expect(review).to.have.property(\"course\").and.eql(course_id);",
									"\t\tpm.expect(review).to.have.property(\"rating\");",
									"\t\tpm.expect(review).to.have.property(\"date\");",
									"\t\tpm.expect(review).to.have.property(\"comment\");",
									"\t\tpm.expect(review).to.have.property(\"hasCompleted\");",
									"\t});",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/courses/{{course_id}}/reviews",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"courses",
								"{{course_id}}",
								"reviews"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 - GET all reviews of a User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Declare response data",
									"const jsonData = pm.response.json()[\"reviews\"]; // reviews is needed",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const user_id = Number(pm.environment.get('user_id'));",
									"",
									"jsonData.forEach((review) => {",
									"\tpm.test(`Check all properties for reviewID: ${review.reviewID} and connected to courseID: ${user_id}`, () => {",
									"\t\tpm.expect(review.reviewID).to.be.a('number').and.not.eql(0);",
									"\t\tpm.expect(review).to.have.property(\"user\").and.eql(user_id);",
									"\t\tpm.expect(review).to.have.property(\"course\");",
									"\t\tpm.expect(review).to.have.property(\"rating\");",
									"\t\tpm.expect(review).to.have.property(\"date\");",
									"\t\tpm.expect(review).to.have.property(\"comment\");",
									"\t\tpm.expect(review).to.have.property(\"hasCompleted\");",
									"\t});",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/api/users/{{user_id}}/courses/{{course_id}}/reviews",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users",
								"{{user_id}}",
								"courses",
								"{{course_id}}",
								"reviews"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 - GET review from user and course",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Declare response data",
									"const jsonData = pm.response.json()[\"review\"]; // reviews is needed",
									"console.log(jsonData);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const review_id = Number(pm.environment.get('review_id'));",
									"const user_id = Number(pm.environment.get('user_id'));",
									"",
									"pm.test(`Check all properties for reviewID: ${review_id}`, () => {",
									"    pm.expect(jsonData.reviewID).to.be.a('number').and.not.eql(0);",
									"    pm.expect(jsonData).to.have.property(\"user\").and.eql(user_id);",
									"    pm.expect(jsonData).to.have.property(\"course\");",
									"    pm.expect(jsonData).to.have.property(\"rating\");",
									"    pm.expect(jsonData).to.have.property(\"date\");",
									"    pm.expect(jsonData).to.have.property(\"comment\");",
									"    pm.expect(jsonData).to.have.property(\"hasCompleted\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/api/users/{{user_id}}/courses/{{course_id}}/reviews/{{review_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users",
								"{{user_id}}",
								"courses",
								"{{course_id}}",
								"reviews",
								"{{review_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "404 - GET Review that does not exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"GET request status 404 - review not found\", () => {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/reviews/{{not_existing_review_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"reviews",
								"{{not_existing_review_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 - DELETE Review from reviews",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful DELETE request - status 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/reviews/{{review_id3}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"reviews",
								"{{review_id3}}"
							]
						},
						"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "404 - DELETE Review that does not exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"DELETE request status 404 - review not found\", () => {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/reviews/{{not_existing_review_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"reviews",
								"{{not_existing_review_id}}"
							]
						},
						"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
					},
					"response": []
				}
			]
		},
		{
			"name": "CourseLists",
			"item": [
				{
					"name": "201 - POST CourseList #1 to courseLists",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Declare request- and response data, set environment variable",
									"const requestData = pm.request.body.raw ? JSON.parse(pm.request.body.raw) : {};",
									"const jsonData = pm.response.json()[\"CourseList\"]; // User is needed",
									"pm.environment.set(\"course_list_id\", jsonData.courseListID);",
									"",
									"// Set not existing courseListID",
									"pm.environment.set(\"not_existing_course_list_id\", 100_000);",
									"",
									"// Test assertions for HTTP status code",
									"pm.test(\"Status code 201 - created\", () => {",
									"\tpm.response.to.have.status(201);",
									"});",
									"",
									"// Document has all necessary properties",
									"pm.test(\"Response contains all necessary properties and id is not 0\", () => {",
									"\tpm.expect(jsonData.courseListID).to.be.a('number').and.not.eql(0);",
									"\tpm.expect(jsonData).to.have.property(\"name\");",
									"\tpm.expect(jsonData).to.have.property(\"creationDate\");",
									"\tpm.expect(jsonData).to.have.property(\"userID\");",
									"\tpm.expect(jsonData).to.have.property(\"description\");",
									"\tpm.expect(jsonData).to.have.property(\"courses\");",
									"});",
									"",
									"// Loop through and compare request data to response data",
									"pm.test(\"Response matches all input data\", () => {",
									"\tObject.keys(requestData).forEach(key => {",
									"\t\tpm.test(`Field matches for: ${key}`, () => {",
									"\t\t\tpm.expect(jsonData[key]).to.eql(requestData[key]);",
									"\t\t});",
									"\t});",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"CS-stuff\",\n    \"description\": \"Computer science related topics\",\n    \"courses\": [1, 2]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/users/{{user_id}}/course-lists",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users",
								"{{user_id}}",
								"course-lists"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "201 - POST CourseList #2 to courseLists",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Declare request- and response data, set environment variable",
									"const requestData = pm.request.body.raw ? JSON.parse(pm.request.body.raw) : {};",
									"const jsonData = pm.response.json()[\"CourseList\"]; // User is needed",
									"pm.environment.set(\"course_list_id2\", jsonData.courseListID);",
									"",
									"// Test assertions for HTTP status code",
									"pm.test(\"Status code 201 - created\", () => {",
									"\tpm.response.to.have.status(201);",
									"});",
									"",
									"// Document has all necessary properties",
									"pm.test(\"Response contains all necessary properties and id is not 0\", () => {",
									"\tpm.expect(jsonData.courseListID).to.be.a('number').and.not.eql(0);",
									"\tpm.expect(jsonData).to.have.property(\"name\");",
									"\tpm.expect(jsonData).to.have.property(\"creationDate\");",
									"\tpm.expect(jsonData).to.have.property(\"userID\");",
									"\tpm.expect(jsonData).to.have.property(\"description\");",
									"\tpm.expect(jsonData).to.have.property(\"courses\");",
									"});",
									"",
									"// Loop through and compare request data to response data",
									"pm.test(\"Response matches all input data\", () => {",
									"\tObject.keys(requestData).forEach(key => {",
									"\t\tpm.test(`Field matches for: ${key}`, () => {",
									"\t\t\tpm.expect(jsonData[key]).to.eql(requestData[key]);",
									"\t\t});",
									"\t});",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"CS-related\",\n    \"description\": \"Computer science related topics\",\n    \"courses\": [1, 2]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/users/{{user_id2}}/course-lists",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users",
								"{{user_id2}}",
								"course-lists"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "201 - POST CourseList #3 to courseLists",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Declare request- and response data, set environment variable",
									"const requestData = pm.request.body.raw ? JSON.parse(pm.request.body.raw) : {};",
									"const jsonData = pm.response.json()[\"CourseList\"]; // User is needed",
									"pm.environment.set(\"course_list_id3\", jsonData.courseListID);",
									"",
									"// Test assertions for HTTP status code",
									"pm.test(\"Status code 201 - created\", () => {",
									"\tpm.response.to.have.status(201);",
									"});",
									"",
									"// Document has all necessary properties",
									"pm.test(\"Response contains all necessary properties and id is not 0\", () => {",
									"\tpm.expect(jsonData.courseListID).to.be.a('number').and.not.eql(0);",
									"\tpm.expect(jsonData).to.have.property(\"name\");",
									"\tpm.expect(jsonData).to.have.property(\"creationDate\");",
									"\tpm.expect(jsonData).to.have.property(\"userID\");",
									"\tpm.expect(jsonData).to.have.property(\"description\");",
									"\tpm.expect(jsonData).to.have.property(\"courses\");",
									"});",
									"",
									"// Loop through and compare request data to response data",
									"pm.test(\"Response matches all input data\", () => {",
									"\tObject.keys(requestData).forEach(key => {",
									"\t\tpm.test(`Field matches for: ${key}`, () => {",
									"\t\t\tpm.expect(jsonData[key]).to.eql(requestData[key]);",
									"\t\t});",
									"\t});",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"CS-stuff\",\n    \"description\": \"Computer science stuff\",\n    \"courses\": [1, 2]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/users/{{user_id2}}/course-lists",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users",
								"{{user_id2}}",
								"course-lists"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "200 - PATCH CourseList data in courseLists",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Declare request- and response data",
									"const jsonData = pm.response.json();",
									"const requestData = pm.request.body.raw ? JSON.parse(pm.request.body.raw) : {};",
									"",
									"pm.test(\"Successful PATCH request - status 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Check other fields that should never have null values",
									"pm.test(\"PATCH request kept other field(s) intact\", () => {",
									"\tpm.expect(jsonData.name).to.be.a('string');",
									"\tpm.expect(jsonData.creationDate).to.be.a('string').and.is.not.empty; // date as string",
									"\tpm.expect(jsonData.userID).to.be.a('number').and.is.not.eql(0);",
									"\tpm.expect(jsonData.description).to.be.a('string');",
									"\tpm.expect(jsonData.courses).to.be.a('array').and.is.not.empty;",
									"});",
									"",
									"// Loop through and compare request data to response data",
									"pm.test(\"Response matches input data\", () => {",
									"\tObject.keys(requestData).forEach(key => {",
									"        console.log(requestData[key], jsonData[key]);",
									"\t\tpm.test(`Field matches for: ${key}`, () => {",
									"\t\t\tpm.expect(jsonData[key]).to.eql(requestData[key]);",
									"\t\t});",
									"\t});",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"CS-related courses\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/users/{{user_id}}/course-lists/{{course_list_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users",
								"{{user_id}}",
								"course-lists",
								"{{course_list_id}}"
							]
						},
						"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "404 - PATCH CourseList that doest not exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"PATCH request status 404 - courseList not found\", () => {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"CS-related courses\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/users/{{user_id}}/course-lists/{{not_existing_course_list_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users",
								"{{user_id}}",
								"course-lists",
								"{{not_existing_course_list_id}}"
							]
						},
						"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "200 - PUT CourseList data in courseLists",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Declare request- and response data",
									"const jsonData = pm.response.json();",
									"const requestData = pm.request.body.raw ? JSON.parse(pm.request.body.raw) : {};",
									"",
									"pm.test(\"Successful PATCH request - status 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Check other fields that should never have null values",
									"pm.test(\"PATCH request kept other field(s) intact\", () => {",
									"\tpm.expect(jsonData.name).to.be.a('string');",
									"\tpm.expect(jsonData.creationDate).to.be.a('string').and.is.not.empty; // date as string",
									"\tpm.expect(jsonData.userID).to.be.a('number').and.is.not.eql(0);",
									"\tpm.expect(jsonData.description).to.be.a('string');",
									"\tpm.expect(jsonData.courses).to.be.a('array').and.is.not.empty;",
									"});",
									"",
									"// Loop through and compare request data to response data",
									"pm.test(\"Response matches input data\", () => {",
									"\tObject.keys(requestData).forEach(key => {",
									"        console.log(requestData[key], jsonData[key]);",
									"\t\tpm.test(`Field matches for: ${key}`, () => {",
									"\t\t\tpm.expect(jsonData[key]).to.eql(requestData[key]);",
									"\t\t});",
									"\t});",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"CS-related stuff\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/users/{{user_id}}/course-lists/{{course_list_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users",
								"{{user_id}}",
								"course-lists",
								"{{course_list_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "404 - PUT CourseList that doest not exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"PUT request status 404 - courseList not found\", () => {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"CS-related stuff\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/users/{{user_id}}/course-lists/{{not_existing_course_list_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users",
								"{{user_id}}",
								"course-lists",
								"{{not_existing_course_list_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 - GET all courseLists of a User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Declare response data",
									"const jsonData = pm.response.json()['courseLists'];",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const user_id = Number(pm.environment.get('user_id'));",
									"",
									"jsonData.forEach((courseList) => {",
									"\tpm.test(`Check all properties for courseListID: ${courseList.courseListID} and connected to userID: ${user_id}`, () => {",
									"\t\tpm.expect(courseList.courseListID).to.be.a('number').and.not.eql(0);",
									"\t\tpm.expect(courseList).to.have.property(\"name\");",
									"\t\tpm.expect(courseList).to.have.property(\"creationDate\");",
									"\t\tpm.expect(courseList).to.have.property(\"userID\").and.eql(user_id);",
									"\t\tpm.expect(courseList).to.have.property(\"description\");",
									"\t\tpm.expect(courseList).to.have.property(\"courses\");",
									"\t});",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/api/users/{{user_id}}/course-lists",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users",
								"{{user_id}}",
								"course-lists"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 - GET specific  CourseList",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Declare response data",
									"const jsonData = pm.response.json();",
									"",
									"",
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"console.log(jsonData);",
									"// Document has all necessary properties",
									"pm.test(\"Response contains all necessary properties and courseID is not 0\", () => {",
									"\tpm.expect(jsonData.courseListID).to.be.a('number').and.not.eql(0);",
									"\tpm.expect(jsonData).to.have.property(\"name\");",
									"\tpm.expect(jsonData).to.have.property(\"creationDate\");",
									"\tpm.expect(jsonData).to.have.property(\"userID\");",
									"\tpm.expect(jsonData).to.have.property(\"description\");",
									"\tpm.expect(jsonData).to.have.property(\"courses\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "host",
								"value": "http://localhost:3000",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{host}}/api/users/{{user_id}}/course-lists/{{course_list_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users",
								"{{user_id}}",
								"course-lists",
								"{{course_list_id}}"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "404 - GET CourseList that does not exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"GET request status 404 - courseList not found\", () => {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "host",
								"value": "http://localhost:3000",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{host}}/api/users/{{user_id}}/course-lists/{{not_existing_course_list_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users",
								"{{user_id}}",
								"course-lists",
								"{{not_existing_course_list_id}}"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "200 - DELETE CourseList from courseLists",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful DELETE request - status 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/users/{{user_id}}/course-lists/{{course_list_id2}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users",
								"{{user_id}}",
								"course-lists",
								"{{course_list_id2}}"
							]
						},
						"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "404 - DELETE CourseList that does not exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"DELETE request status 404 - courseList not found\", () => {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/users/{{user_id}}/course-lists/{{not_existing_course_list_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users",
								"{{user_id}}",
								"course-lists",
								"{{not_existing_course_list_id}}"
							]
						},
						"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "id",
			"value": "1"
		},
		{
			"key": "base_url",
			"value": "https://postman-rest-api-learner.glitch.me/"
		}
	]
}