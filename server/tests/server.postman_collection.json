{
	"info": {
		"_postman_id": "88824d54-7f26-4b1b-9e05-3e4e83530458",
		"name": "server",
		"description": "# ðŸš€ Get started here\n\nThis template guides you through CRUD operations (GET, POST, PUT, DELETE), variables, and tests.\n\n## ðŸ”– **How to use this template**\n\n#### **Step 1: Send requests**\n\nRESTful APIs allow you to perform CRUD operations using the POST, GET, PUT, and DELETE HTTP methods.\n\nThis collection contains each of these [request](https://learning.postman.com/docs/sending-requests/requests/) types. Open each request and click \"Send\" to see what happens.\n\n#### **Step 2: View responses**\n\nObserve the response tab for status code (200 OK), response time, and size.\n\n#### **Step 3: Send new Body data**\n\nUpdate or add new data in \"Body\" in the POST request. Typically, Body data is also used in PUT request.\n\n```\n{\n    \"name\": \"Add your name in the body\"\n}\n\n ```\n\n#### **Step 4: Update the variable**\n\nVariables enable you to store and reuse values in Postman. We have created a [variable](https://learning.postman.com/docs/sending-requests/variables/) called `base_url` with the sample request [https://postman-api-learner.glitch.me](https://postman-api-learner.glitch.me). Replace it with your API endpoint to customize this collection.\n\n#### **Step 5: Add tests in the \"Scripts\" tab**\n\nAdding tests to your requests can help you confirm that your API is working as expected. You can write test scripts in JavaScript and view the output in the \"Test Results\" tab.\n\n<img src=\"https://content.pstmn.io/fa30ea0a-373d-4545-a668-e7b283cca343/aW1hZ2UucG5n\" width=\"2162\" height=\"1530\">\n\n## ðŸ’ª Pro tips\n\n- Use folders to group related requests and organize the collection.\n    \n- Add more [scripts](https://learning.postman.com/docs/writing-scripts/intro-to-scripts/) to verify if the API works as expected and execute workflows.\n    \n\n## ðŸ’¡Related templates\n\n[API testing basics](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9a37a28-055b-49cd-8c7e-97494a21eb54&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[API documentation](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9c28f47-1253-44af-a2f3-20dce4da1f18&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[Authorization methods](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=31a9a6ed-4cdf-4ced-984c-d12c9aec1c27&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "38088221",
		"_collection_link": "https://www.postman.com/group-15/workspace/group-15/collection/38366801-88824d54-7f26-4b1b-9e05-3e4e83530458?action=share&source=collection_link&creator=38088221"
	},
	"item": [
		{
			"name": "All creations",
			"item": [
				{
					"name": "201 - Create 1st user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for user creation and store user_id",
									"pm.test(\"Create new user in the system\", () => {",
									"    pm.response.to.have.status(201);",
									"",
									"    const userID = pm.response.json().userID;",
									"    if (userID) {",
									"        pm.environment.set(\"user_id\", userID); // Update user_id in environment variable",
									"        pm.expect(userID).to.be.a('string').that.is.not.empty; // Validate user_id",
									"    } else {",
									"        pm.expect.fail(\"user ID not found in response\"); // Fail if user_id is missing",
									"    }",
									"});",
									"",
									"pm.environment.set(\"not_existing_id\", \"66f10daef1ff7aba93c2e8f1\");",
									"pm.environment.set(\"not_valid_id_format\", \"abcdefghijklmn\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"api_version\", \"v1\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"mrBagel34\",\n\t\"email\": \"mrbagel_34@gmail.com\",\n\t\"password\": \"Sunshine34\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/{{api_version}}/auth/register",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "201 - Create 2nd user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for user creation and store user_id",
									"pm.test(\"Create new user in the system\", () => {",
									"    pm.response.to.have.status(201);",
									"",
									"    const userID = pm.response.json().userID;",
									"    if (userID) {",
									"        pm.environment.set(\"user_id2\", userID); // Update user_id in environment variable",
									"        pm.expect(userID).to.be.a('string').that.is.not.empty; // Validate user_id",
									"    } else {",
									"        pm.expect.fail(\"user ID not found in response\"); // Fail if user_id is missing",
									"    }",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"raymondQ2\",\n    \"email\": \"raymondqt@outlook.com\",\n    \"password\": \"raymondisthebest\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/{{api_version}}/auth/register",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "201 - Create 3rd user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for user creation and store user_id",
									"pm.test(\"Create new user in the system\", () => {",
									"    pm.response.to.have.status(201);",
									"",
									"    const userID = pm.response.json().userID;",
									"    if (userID) {",
									"        pm.environment.set(\"user_id3\", userID); // Update user_id in environment variable",
									"        pm.expect(userID).to.be.a('string').that.is.not.empty; // Validate user_id",
									"    } else {",
									"        pm.expect.fail(\"user ID not found in response\"); // Fail if user_id is missing",
									"    }",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"theodoraSmythe\",\n    \"email\": \"theosmythe@outlook.com\",\n    \"password\": \"aaron2104\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/{{api_version}}/auth/register",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "201 - Create 4th user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for user creation and store user_id",
									"pm.test(\"Create new user in the system\", () => {",
									"    pm.response.to.have.status(201);",
									"",
									"    const userID = pm.response.json().userID;",
									"    if (userID) {",
									"        pm.environment.set(\"user_id4\", userID); // Update user_id in environment variable",
									"        pm.expect(userID).to.be.a('string').that.is.not.empty; // Validate user_id",
									"    } else {",
									"        pm.expect.fail(\"user ID not found in response\"); // Fail if user_id is missing",
									"    }",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"smithers\",\n    \"email\": \"mikesmith@gmail.com\",\n    \"password\": \"123456\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/{{api_version}}/auth/register",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "201 - Create 5th user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for user creation and store user_id",
									"pm.test(\"Create new user in the system\", () => {",
									"    pm.response.to.have.status(201);",
									"",
									"    const userID = pm.response.json().userID;",
									"    if (userID) {",
									"        pm.environment.set(\"user_id5\", userID); // Update user_id in environment variable",
									"        pm.expect(userID).to.be.a('string').that.is.not.empty; // Validate user_id",
									"    } else {",
									"        pm.expect.fail(\"user ID not found in response\"); // Fail if user_id is missing",
									"    }",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"corrigan_2\",\n    \"email\": \"theo_corrigan@outlook.com\",\n    \"password\": \"password1\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/{{api_version}}/auth/register",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 - Sign in user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Store new token and assert login and token format",
									"pm.test(\"User successfully logged in with updated token\", () => {",
									"\tpm.response.to.have.status(200)",
									"\tconst jsonData = pm.response.json();",
									"\t\tif  (jsonData.token) {",
									"    \tpm.environment.set(\"jwt_token\", jsonData.token);",
									"\t\t\tpm.expect(jsonData.token).to.be.a('string').that.is.not.empty; // Validate the token",
									"\t\t} else {",
									"\t\t\tpm.expect.fail(\"Token not found in response\"); // Fail if token is missing",
									"\t\t}",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"mrBagel34\",\n\t\"password\": \"Sunshine34\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/{{api_version}}/auth/signin",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"auth",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 - Sign in admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Store new token and assert login and token format",
									"pm.test(\"User successfully logged in with updated token\", () => {",
									"\tpm.response.to.have.status(200)",
									"\tconst jsonData = pm.response.json();",
									"\t\tif  (jsonData.token) {",
									"    \tpm.environment.set(\"admin_jwt_token\", jsonData.token);",
									"\t\t\tpm.expect(jsonData.token).to.be.a('string').that.is.not.empty; // Validate the token",
									"\t\t} else {",
									"\t\t\tpm.expect.fail(\"Token not found in response\"); // Fail if token is missing",
									"\t\t}",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"admin\",\n\t\"password\": \"admin123\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/{{api_version}}/auth/signin",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"auth",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "201 - User creates 1st topic",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status 201 or 200 - Topic created or updated\", () => {",
									"  pm.expect(pm.response.code).to.be.oneOf([201, 200])",
									"})",
									"",
									"const topicID = pm.response.json()._id;",
									"pm.environment.set(\"topic_1\", topicID);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Python\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/{{api_version}}/topics",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"topics"
							]
						}
					},
					"response": []
				},
				{
					"name": "201 - User creates 2nd topic",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status 201 or 200 - Topic created or updated\", () => {",
									"  pm.expect(pm.response.code).to.be.oneOf([201, 200])",
									"})",
									"",
									"const topicID = pm.response.json()._id;",
									"pm.environment.set(\"topic_2\", topicID);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"C-Language\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/{{api_version}}/topics",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"topics"
							]
						}
					},
					"response": []
				},
				{
					"name": "201 - User creates 3rd topic",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status 201 or 200 - Topic created or updated\", () => {",
									"  pm.expect(pm.response.code).to.be.oneOf([201, 200])",
									"})",
									"",
									"const topicID = pm.response.json()._id;",
									"pm.environment.set(\"topic_3\", topicID);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"mEchanical engineering\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/{{api_version}}/topics",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"topics"
							]
						}
					},
					"response": []
				},
				{
					"name": "201 - User creates 4th topic",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status 201 or 200 - Topic created or updated\", () => {",
									"  pm.expect(pm.response.code).to.be.oneOf([201, 200])",
									"})",
									"",
									"const topicID = pm.response.json()._id;",
									"pm.environment.set(\"topic_4\", topicID);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Programming\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/{{api_version}}/topics",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"topics"
							]
						}
					},
					"response": []
				},
				{
					"name": "201 - User creates 5th topic",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status 201 or 200 - Topic created or updated\", () => {",
									"  pm.expect(pm.response.code).to.be.oneOf([201, 200])",
									"})",
									"",
									"const topicID = pm.response.json()._id;",
									"pm.environment.set(\"topic_5\", topicID);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"VUE\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/{{api_version}}/topics",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"topics"
							]
						}
					},
					"response": []
				},
				{
					"name": "201 - User creates 6th topic",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status 201 or 200 - Topic created or updated\", () => {",
									"  pm.expect(pm.response.code).to.be.oneOf([201, 200])",
									"})",
									"",
									"const topicID = pm.response.json()._id;",
									"pm.environment.set(\"topic_6\", topicID);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Node JS\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/{{api_version}}/topics",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"topics"
							]
						}
					},
					"response": []
				},
				{
					"name": "201 - User creates 7th topic",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status 201 or 200 - Topic created or updated\", () => {",
									"  pm.expect(pm.response.code).to.be.oneOf([201, 200])",
									"})",
									"",
									"const topicID = pm.response.json()._id;",
									"pm.environment.set(\"topic_7\", topicID);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"History\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/{{api_version}}/topics",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"topics"
							]
						}
					},
					"response": []
				},
				{
					"name": "201 - User creates 8th topic",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status 201 or 200 - Topic created or updated\", () => {",
									"  pm.expect(pm.response.code).to.be.oneOf([201, 200])",
									"})",
									"",
									"const topicID = pm.response.json()._id;",
									"pm.environment.set(\"topic_8\", topicID);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Psychology\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/{{api_version}}/topics",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"topics"
							]
						}
					},
					"response": []
				},
				{
					"name": "201 - User creates 9th topic",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status 201 or 200 - Topic created or updated\", () => {",
									"  pm.expect(pm.response.code).to.be.oneOf([201, 200])",
									"})",
									"",
									"const topicID = pm.response.json()._id;",
									"pm.environment.set(\"topic_9\", topicID);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"JavaScript\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/{{api_version}}/topics",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"topics"
							]
						}
					},
					"response": []
				},
				{
					"name": "201 - User creates 10th topic",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status 201 or 200 - Topic created or updated\", () => {",
									"  pm.expect(pm.response.code).to.be.oneOf([201, 200])",
									"})",
									"",
									"const topicID = pm.response.json()._id;",
									"pm.environment.set(\"topic_10\", topicID);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Photography\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/{{api_version}}/topics",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"topics"
							]
						}
					},
					"response": []
				},
				{
					"name": "201 - Create 1st course",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Declare request- and response data, set environment variable",
									"const requestData = pm.request.body.raw ? JSON.parse(pm.request.body.raw) : {};",
									"const jsonData = pm.response.json()[\"course\"]; // Course is needed",
									"pm.environment.set(\"course_id\", jsonData._id);",
									"",
									"// Test assertions for HTTP status code",
									"pm.test(\"Status code 201 - created\", () => {",
									"\tpm.response.to.have.status(201);",
									"});",
									"",
									"// Document has all necessary properties",
									"pm.test(\"Response contains all necessary properties and courseID is not 0\", () => {",
									"\tpm.expect(jsonData).to.have.property(\"name\");",
									"\tpm.expect(jsonData).to.have.property(\"topics\");",
									"\tpm.expect(jsonData).to.have.property(\"difficulty\");",
									"\tpm.expect(jsonData).to.have.property(\"description\");",
									"\tpm.expect(jsonData).to.have.property(\"releaseYear\");",
									"\tpm.expect(jsonData).to.have.property(\"provider\");",
									"\tpm.expect(jsonData).to.have.property(\"instructor\");",
									"\tpm.expect(jsonData).to.have.property(\"certificate\");",
									"\tpm.expect(jsonData).to.have.property(\"accessType\");",
									"\tpm.expect(jsonData).to.have.property(\"photo\");",
									"\tpm.expect(jsonData).to.have.property(\"url\");",
									"});",
									"",
									"// Loop through and compare request data to response data",
									"pm.test(\"Response matches all input data\", () => {",
									"\tObject.keys(requestData).forEach(key => {",
									"\t\tpm.test(`Field matches for: ${key}`, () => {",
									"\t\t\tpm.expect(jsonData[key]).to.eql(requestData[key]);",
									"\t\t});",
									"\t});",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"C Programming for Everybody\",\n  \"topics\": [\"{{topic_2}}\"],\n  \"difficulty\": \"Beginner\",\n  \"description\": \"Course dedicated to understanding computer architecture and low-level programming by studying the 'classic' version of the C Programming language from the 1978 booking by Brian W. Kernighan.\",\n  \"releaseYear\": 2022,\n  \"provider\": \"FreeCodeCamp\",\n  \"instructor\": \"Dr. Charles R. Severance\",\n  \"certificate\": \"No\",\n  \"accessType\": \"Free\",\n  \"photo\": \"https://picsum.photos/id/250/300/200\",\n  \"url\": \"https://www.freecodecamp.org/news/complete-c-programming-course-from-dr-chuck/\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/{{api_version}}/courses",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"courses"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "201 - Create 2nd course",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Declare request- and response data, set environment variable",
									"const requestData = pm.request.body.raw ? JSON.parse(pm.request.body.raw) : {};",
									"const jsonData = pm.response.json()[\"course\"]; // Course is needed",
									"pm.environment.set(\"course_id2\", jsonData._id);",
									"",
									"// Test assertions for HTTP status code",
									"pm.test(\"Status code 201 - created\", () => {",
									"\tpm.response.to.have.status(201);",
									"});",
									"",
									"// Document has all necessary properties",
									"pm.test(\"Response contains all necessary properties and courseID is not 0\", () => {",
									"\tpm.expect(jsonData).to.have.property(\"name\");",
									"\tpm.expect(jsonData).to.have.property(\"topics\");",
									"\tpm.expect(jsonData).to.have.property(\"difficulty\");",
									"\tpm.expect(jsonData).to.have.property(\"description\");",
									"\tpm.expect(jsonData).to.have.property(\"releaseYear\");",
									"\tpm.expect(jsonData).to.have.property(\"provider\");",
									"\tpm.expect(jsonData).to.have.property(\"instructor\");",
									"\tpm.expect(jsonData).to.have.property(\"certificate\");",
									"\tpm.expect(jsonData).to.have.property(\"accessType\");",
									"\tpm.expect(jsonData).to.have.property(\"photo\");",
									"\tpm.expect(jsonData).to.have.property(\"url\");",
									"});",
									"",
									"// Loop through and compare request data to response data",
									"pm.test(\"Response matches all input data\", () => {",
									"\tObject.keys(requestData).forEach(key => {",
									"\t\tpm.test(`Field matches for: ${key}`, () => {",
									"\t\t\tpm.expect(jsonData[key]).to.eql(requestData[key]);",
									"\t\t});",
									"\t});",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Python Complete Course For Beginners\",\n  \"topics\": [\"{{topic_1}}\"],\n  \"difficulty\": \"Beginner\",\n  \"description\": \"Introduction course to the world of Python.\",\n  \"releaseYear\": 2023,\n  \"provider\": \"Udemy\",\n  \"instructor\": \"Dennis M. Ritchie\",\n  \"certificate\": \"Yes\",\n  \"accessType\": \"Enrollment\",\n  \"photo\": \"https://picsum.photos/id/247/300/200\",\n  \"url\": \"www.udemy.com\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/{{api_version}}/courses",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"courses"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "201 - Create 3rd course",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Declare request- and response data, set environment variable",
									"const requestData = pm.request.body.raw ? JSON.parse(pm.request.body.raw) : {};",
									"const jsonData = pm.response.json()[\"course\"]; // Course is needed",
									"pm.environment.set(\"course_id3\", jsonData._id);",
									"",
									"// Test assertions for HTTP status code",
									"pm.test(\"Status code 201 - created\", () => {",
									"\tpm.response.to.have.status(201);",
									"});",
									"",
									"// Document has all necessary properties",
									"pm.test(\"Response contains all necessary properties and courseID is not 0\", () => {",
									"\tpm.expect(jsonData).to.have.property(\"name\");",
									"\tpm.expect(jsonData).to.have.property(\"topics\");",
									"\tpm.expect(jsonData).to.have.property(\"difficulty\");",
									"\tpm.expect(jsonData).to.have.property(\"description\");",
									"\tpm.expect(jsonData).to.have.property(\"releaseYear\");",
									"\tpm.expect(jsonData).to.have.property(\"provider\");",
									"\tpm.expect(jsonData).to.have.property(\"instructor\");",
									"\tpm.expect(jsonData).to.have.property(\"certificate\");",
									"\tpm.expect(jsonData).to.have.property(\"accessType\");",
									"\tpm.expect(jsonData).to.have.property(\"photo\");",
									"\tpm.expect(jsonData).to.have.property(\"url\");",
									"});",
									"",
									"// Loop through and compare request data to response data",
									"pm.test(\"Response matches all input data\", () => {",
									"\tObject.keys(requestData).forEach(key => {",
									"\t\tpm.test(`Field matches for: ${key}`, () => {",
									"\t\t\tpm.expect(jsonData[key]).to.eql(requestData[key]);",
									"\t\t});",
									"\t});",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Mechanical Engineering for dummies\",\n  \"topics\": [\"{{topic_3}}\"],\n  \"difficulty\": \"Beginner\",\n  \"description\": \"No prior knowledge in mechanical engineering needed.\",\n  \"releaseYear\": 2022,\n  \"provider\": \"PluralSight\",\n  \"instructor\": \"Jacob Strong\",\n  \"certificate\": \"No\",\n  \"accessType\": \"Free\",\n  \"photo\": \"https://picsum.photos/id/1/300/200\",\n  \"url\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/{{api_version}}/courses",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"courses"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "201 - Create 4th course",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Declare request- and response data, set environment variable",
									"const requestData = pm.request.body.raw ? JSON.parse(pm.request.body.raw) : {};",
									"const jsonData = pm.response.json()[\"course\"]; // Course is needed",
									"pm.environment.set(\"course_id4\", jsonData._id);",
									"",
									"// Test assertions for HTTP status code",
									"pm.test(\"Status code 201 - created\", () => {",
									"\tpm.response.to.have.status(201);",
									"});",
									"",
									"// Document has all necessary properties",
									"pm.test(\"Response contains all necessary properties and courseID is not 0\", () => {",
									"\tpm.expect(jsonData).to.have.property(\"name\");",
									"\tpm.expect(jsonData).to.have.property(\"topics\");",
									"\tpm.expect(jsonData).to.have.property(\"difficulty\");",
									"\tpm.expect(jsonData).to.have.property(\"description\");",
									"\tpm.expect(jsonData).to.have.property(\"releaseYear\");",
									"\tpm.expect(jsonData).to.have.property(\"provider\");",
									"\tpm.expect(jsonData).to.have.property(\"instructor\");",
									"\tpm.expect(jsonData).to.have.property(\"certificate\");",
									"\tpm.expect(jsonData).to.have.property(\"accessType\");",
									"\tpm.expect(jsonData).to.have.property(\"photo\");",
									"\tpm.expect(jsonData).to.have.property(\"url\");",
									"});",
									"",
									"// Loop through and compare request data to response data",
									"pm.test(\"Response matches all input data\", () => {",
									"\tObject.keys(requestData).forEach(key => {",
									"\t\tpm.test(`Field matches for: ${key}`, () => {",
									"\t\t\tpm.expect(jsonData[key]).to.eql(requestData[key]);",
									"\t\t});",
									"\t});",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Advanced Photograpy\",\n  \"topics\": [\"{{topic_10}}\"],\n  \"difficulty\": \"Advanced\",\n  \"description\": \"Knowledge in photograpy needed.\",\n  \"releaseYear\": 2022,\n  \"provider\": \"Udemy\",\n  \"instructor\": \"Jeff Hall\",\n  \"certificate\": \"No\",\n  \"accessType\": \"Free\",\n  \"photo\": \"https://picsum.photos/id/25/300/200\",\n  \"url\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/{{api_version}}/courses",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"courses"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "201 - Create 5th course",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Declare request- and response data, set environment variable",
									"const requestData = pm.request.body.raw ? JSON.parse(pm.request.body.raw) : {};",
									"const jsonData = pm.response.json()[\"course\"]; // Course is needed",
									"pm.environment.set(\"course_id5\", jsonData._id);",
									"",
									"// Test assertions for HTTP status code",
									"pm.test(\"Status code 201 - created\", () => {",
									"\tpm.response.to.have.status(201);",
									"});",
									"",
									"// Document has all necessary properties",
									"pm.test(\"Response contains all necessary properties and courseID is not 0\", () => {",
									"\tpm.expect(jsonData).to.have.property(\"name\");",
									"\tpm.expect(jsonData).to.have.property(\"topics\");",
									"\tpm.expect(jsonData).to.have.property(\"difficulty\");",
									"\tpm.expect(jsonData).to.have.property(\"description\");",
									"\tpm.expect(jsonData).to.have.property(\"releaseYear\");",
									"\tpm.expect(jsonData).to.have.property(\"provider\");",
									"\tpm.expect(jsonData).to.have.property(\"instructor\");",
									"\tpm.expect(jsonData).to.have.property(\"certificate\");",
									"\tpm.expect(jsonData).to.have.property(\"accessType\");",
									"\tpm.expect(jsonData).to.have.property(\"photo\");",
									"\tpm.expect(jsonData).to.have.property(\"url\");",
									"});",
									"",
									"// Loop through and compare request data to response data",
									"pm.test(\"Response matches all input data\", () => {",
									"\tObject.keys(requestData).forEach(key => {",
									"\t\tpm.test(`Field matches for: ${key}`, () => {",
									"\t\t\tpm.expect(jsonData[key]).to.eql(requestData[key]);",
									"\t\t});",
									"\t});",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Lorem ipsum...\",\n  \"topics\": [\"{{topic_4}}\"],\n  \"difficulty\": \"Beginner\",\n  \"description\": \"Lorem ipsum...\",\n  \"releaseYear\": 2022,\n  \"provider\": \"Udemy\",\n  \"instructor\": \"John Doe\",\n  \"certificate\": \"No\",\n  \"accessType\": \"Free\",\n  \"photo\": \"https://picsum.photos/id/255/300/200\",\n  \"url\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/{{api_version}}/courses",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"courses"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "201 - Create 6th course",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Declare request- and response data, set environment variable",
									"const requestData = pm.request.body.raw ? JSON.parse(pm.request.body.raw) : {};",
									"const jsonData = pm.response.json()[\"course\"]; // Course is needed",
									"pm.environment.set(\"course_id6\", jsonData._id);",
									"",
									"// Test assertions for HTTP status code",
									"pm.test(\"Status code 201 - created\", () => {",
									"\tpm.response.to.have.status(201);",
									"});",
									"",
									"// Document has all necessary properties",
									"pm.test(\"Response contains all necessary properties and courseID is not 0\", () => {",
									"\tpm.expect(jsonData).to.have.property(\"name\");",
									"\tpm.expect(jsonData).to.have.property(\"topics\");",
									"\tpm.expect(jsonData).to.have.property(\"difficulty\");",
									"\tpm.expect(jsonData).to.have.property(\"description\");",
									"\tpm.expect(jsonData).to.have.property(\"releaseYear\");",
									"\tpm.expect(jsonData).to.have.property(\"provider\");",
									"\tpm.expect(jsonData).to.have.property(\"instructor\");",
									"\tpm.expect(jsonData).to.have.property(\"certificate\");",
									"\tpm.expect(jsonData).to.have.property(\"accessType\");",
									"\tpm.expect(jsonData).to.have.property(\"photo\");",
									"\tpm.expect(jsonData).to.have.property(\"url\");",
									"});",
									"",
									"// Loop through and compare request data to response data",
									"pm.test(\"Response matches all input data\", () => {",
									"\tObject.keys(requestData).forEach(key => {",
									"\t\tpm.test(`Field matches for: ${key}`, () => {",
									"\t\t\tpm.expect(jsonData[key]).to.eql(requestData[key]);",
									"\t\t});",
									"\t});",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Lorem ipsum...\",\n  \"topics\": [\"{{topic_5}}\"],\n  \"difficulty\": \"Beginner\",\n  \"description\": \"Lorem ipsum...\",\n  \"releaseYear\": 2022,\n  \"provider\": \"Coursera\",\n  \"instructor\": \"John Doe\",\n  \"certificate\": \"No\",\n  \"accessType\": \"Free\",\n  \"photo\": \"https://picsum.photos/id/256/300/200\",\n  \"url\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/{{api_version}}/courses",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"courses"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "201 - Create 7th course",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Declare request- and response data, set environment variable",
									"const requestData = pm.request.body.raw ? JSON.parse(pm.request.body.raw) : {};",
									"const jsonData = pm.response.json()[\"course\"]; // Course is needed",
									"pm.environment.set(\"course_id7\", jsonData._id);",
									"",
									"// Test assertions for HTTP status code",
									"pm.test(\"Status code 201 - created\", () => {",
									"\tpm.response.to.have.status(201);",
									"});",
									"",
									"// Document has all necessary properties",
									"pm.test(\"Response contains all necessary properties and courseID is not 0\", () => {",
									"\tpm.expect(jsonData).to.have.property(\"name\");",
									"\tpm.expect(jsonData).to.have.property(\"topics\");",
									"\tpm.expect(jsonData).to.have.property(\"difficulty\");",
									"\tpm.expect(jsonData).to.have.property(\"description\");",
									"\tpm.expect(jsonData).to.have.property(\"releaseYear\");",
									"\tpm.expect(jsonData).to.have.property(\"provider\");",
									"\tpm.expect(jsonData).to.have.property(\"instructor\");",
									"\tpm.expect(jsonData).to.have.property(\"certificate\");",
									"\tpm.expect(jsonData).to.have.property(\"accessType\");",
									"\tpm.expect(jsonData).to.have.property(\"photo\");",
									"\tpm.expect(jsonData).to.have.property(\"url\");",
									"});",
									"",
									"// Loop through and compare request data to response data",
									"pm.test(\"Response matches all input data\", () => {",
									"\tObject.keys(requestData).forEach(key => {",
									"\t\tpm.test(`Field matches for: ${key}`, () => {",
									"\t\t\tpm.expect(jsonData[key]).to.eql(requestData[key]);",
									"\t\t});",
									"\t});",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Lorem ipsum...\",\n  \"topics\": [\"{{topic_7}}\"],\n  \"difficulty\": \"Beginner\",\n  \"description\": \"Lorem ipsum...\",\n  \"releaseYear\": 2022,\n  \"provider\": \"PluralSight\",\n  \"instructor\": \"John Doe\",\n  \"certificate\": \"No\",\n  \"accessType\": \"Free\",\n  \"photo\": \"https://picsum.photos/id/257/300/200\",\n  \"url\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/{{api_version}}/courses",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"courses"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "201 - Create 8th course",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Declare request- and response data, set environment variable",
									"const requestData = pm.request.body.raw ? JSON.parse(pm.request.body.raw) : {};",
									"const jsonData = pm.response.json()[\"course\"]; // Course is needed",
									"pm.environment.set(\"course_id8\", jsonData._id);",
									"",
									"// Test assertions for HTTP status code",
									"pm.test(\"Status code 201 - created\", () => {",
									"\tpm.response.to.have.status(201);",
									"});",
									"",
									"// Document has all necessary properties",
									"pm.test(\"Response contains all necessary properties and courseID is not 0\", () => {",
									"\tpm.expect(jsonData).to.have.property(\"name\");",
									"\tpm.expect(jsonData).to.have.property(\"topics\");",
									"\tpm.expect(jsonData).to.have.property(\"difficulty\");",
									"\tpm.expect(jsonData).to.have.property(\"description\");",
									"\tpm.expect(jsonData).to.have.property(\"releaseYear\");",
									"\tpm.expect(jsonData).to.have.property(\"provider\");",
									"\tpm.expect(jsonData).to.have.property(\"instructor\");",
									"\tpm.expect(jsonData).to.have.property(\"certificate\");",
									"\tpm.expect(jsonData).to.have.property(\"accessType\");",
									"\tpm.expect(jsonData).to.have.property(\"photo\");",
									"\tpm.expect(jsonData).to.have.property(\"url\");",
									"});",
									"",
									"// Loop through and compare request data to response data",
									"pm.test(\"Response matches all input data\", () => {",
									"\tObject.keys(requestData).forEach(key => {",
									"\t\tpm.test(`Field matches for: ${key}`, () => {",
									"\t\t\tpm.expect(jsonData[key]).to.eql(requestData[key]);",
									"\t\t});",
									"\t});",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Lorem ipsum...\",\n  \"topics\": [\"{{topic_7}}\"],\n  \"difficulty\": \"Beginner\",\n  \"description\": \"Lorem ipsum...\",\n  \"releaseYear\": 2022,\n  \"provider\": \"Coursera\",\n  \"instructor\": \"John Doe\",\n  \"certificate\": \"No\",\n  \"accessType\": \"Free\",\n  \"photo\": \"https://picsum.photos/id/258/300/200\",\n  \"url\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/{{api_version}}/courses",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"courses"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "201 - Create 9th course",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Declare request- and response data, set environment variable",
									"const requestData = pm.request.body.raw ? JSON.parse(pm.request.body.raw) : {};",
									"const jsonData = pm.response.json()[\"course\"]; // Course is needed",
									"pm.environment.set(\"course_id9\", jsonData._id);",
									"",
									"// Test assertions for HTTP status code",
									"pm.test(\"Status code 201 - created\", () => {",
									"\tpm.response.to.have.status(201);",
									"});",
									"",
									"// Document has all necessary properties",
									"pm.test(\"Response contains all necessary properties and courseID is not 0\", () => {",
									"\tpm.expect(jsonData).to.have.property(\"name\");",
									"\tpm.expect(jsonData).to.have.property(\"topics\");",
									"\tpm.expect(jsonData).to.have.property(\"difficulty\");",
									"\tpm.expect(jsonData).to.have.property(\"description\");",
									"\tpm.expect(jsonData).to.have.property(\"releaseYear\");",
									"\tpm.expect(jsonData).to.have.property(\"provider\");",
									"\tpm.expect(jsonData).to.have.property(\"instructor\");",
									"\tpm.expect(jsonData).to.have.property(\"certificate\");",
									"\tpm.expect(jsonData).to.have.property(\"accessType\");",
									"\tpm.expect(jsonData).to.have.property(\"photo\");",
									"\tpm.expect(jsonData).to.have.property(\"url\");",
									"});",
									"",
									"// Loop through and compare request data to response data",
									"pm.test(\"Response matches all input data\", () => {",
									"\tObject.keys(requestData).forEach(key => {",
									"\t\tpm.test(`Field matches for: ${key}`, () => {",
									"\t\t\tpm.expect(jsonData[key]).to.eql(requestData[key]);",
									"\t\t});",
									"\t});",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Lorem ipsum...\",\n  \"topics\": [\"{{topic_8}}\"],\n  \"difficulty\": \"Beginner\",\n  \"description\": \"Lorem ipsum...\",\n  \"releaseYear\": 2022,\n  \"provider\": \"Udemy\",\n  \"instructor\": \"John Doe\",\n  \"certificate\": \"No\",\n  \"accessType\": \"Free\",\n  \"photo\": \"https://picsum.photos/id/259/300/200\",\n  \"url\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/{{api_version}}/courses",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"courses"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "201 - Create 10th course",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Declare request- and response data, set environment variable",
									"const requestData = pm.request.body.raw ? JSON.parse(pm.request.body.raw) : {};",
									"const jsonData = pm.response.json()[\"course\"]; // Course is needed",
									"pm.environment.set(\"course_id10\", jsonData._id);",
									"",
									"// Test assertions for HTTP status code",
									"pm.test(\"Status code 201 - created\", () => {",
									"\tpm.response.to.have.status(201);",
									"});",
									"",
									"// Document has all necessary properties",
									"pm.test(\"Response contains all necessary properties and courseID is not 0\", () => {",
									"\tpm.expect(jsonData).to.have.property(\"name\");",
									"\tpm.expect(jsonData).to.have.property(\"topics\");",
									"\tpm.expect(jsonData).to.have.property(\"difficulty\");",
									"\tpm.expect(jsonData).to.have.property(\"description\");",
									"\tpm.expect(jsonData).to.have.property(\"releaseYear\");",
									"\tpm.expect(jsonData).to.have.property(\"provider\");",
									"\tpm.expect(jsonData).to.have.property(\"instructor\");",
									"\tpm.expect(jsonData).to.have.property(\"certificate\");",
									"\tpm.expect(jsonData).to.have.property(\"accessType\");",
									"\tpm.expect(jsonData).to.have.property(\"photo\");",
									"\tpm.expect(jsonData).to.have.property(\"url\");",
									"});",
									"",
									"// Loop through and compare request data to response data",
									"pm.test(\"Response matches all input data\", () => {",
									"\tObject.keys(requestData).forEach(key => {",
									"\t\tpm.test(`Field matches for: ${key}`, () => {",
									"\t\t\tpm.expect(jsonData[key]).to.eql(requestData[key]);",
									"\t\t});",
									"\t});",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Lorem ipsum...\",\n  \"topics\": [\"{{topic_9}}\"],\n  \"difficulty\": \"Beginner\",\n  \"description\": \"Lorem ipsum...\",\n  \"releaseYear\": 2022,\n  \"provider\": \"Courera\",\n  \"instructor\": \"John Doe\",\n  \"certificate\": \"No\",\n  \"accessType\": \"Free\",\n  \"photo\": \"https://picsum.photos/id/260/300/200\",\n  \"url\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/{{api_version}}/courses",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"courses"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "201 - Create 11th course",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Declare request- and response data, set environment variable",
									"const requestData = pm.request.body.raw ? JSON.parse(pm.request.body.raw) : {};",
									"const jsonData = pm.response.json()[\"course\"]; // Course is needed",
									"pm.environment.set(\"course_id11\", jsonData._id);",
									"",
									"// Test assertions for HTTP status code",
									"pm.test(\"Status code 201 - created\", () => {",
									"\tpm.response.to.have.status(201);",
									"});",
									"",
									"// Document has all necessary properties",
									"pm.test(\"Response contains all necessary properties and courseID is not 0\", () => {",
									"\tpm.expect(jsonData).to.have.property(\"name\");",
									"\tpm.expect(jsonData).to.have.property(\"topics\");",
									"\tpm.expect(jsonData).to.have.property(\"difficulty\");",
									"\tpm.expect(jsonData).to.have.property(\"description\");",
									"\tpm.expect(jsonData).to.have.property(\"releaseYear\");",
									"\tpm.expect(jsonData).to.have.property(\"provider\");",
									"\tpm.expect(jsonData).to.have.property(\"instructor\");",
									"\tpm.expect(jsonData).to.have.property(\"certificate\");",
									"\tpm.expect(jsonData).to.have.property(\"accessType\");",
									"\tpm.expect(jsonData).to.have.property(\"photo\");",
									"\tpm.expect(jsonData).to.have.property(\"url\");",
									"});",
									"",
									"// Loop through and compare request data to response data",
									"pm.test(\"Response matches all input data\", () => {",
									"\tObject.keys(requestData).forEach(key => {",
									"\t\tpm.test(`Field matches for: ${key}`, () => {",
									"\t\t\tpm.expect(jsonData[key]).to.eql(requestData[key]);",
									"\t\t});",
									"\t});",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Lorem ipsum...\",\n  \"topics\": [\"{{topic_10}}\"],\n  \"difficulty\": \"Beginner\",\n  \"description\": \"Lorem ipsum...\",\n  \"releaseYear\": 2022,\n  \"provider\": \"PluralSight\",\n  \"instructor\": \"John Doe\",\n  \"certificate\": \"No\",\n  \"accessType\": \"Free\",\n  \"photo\": \"https://picsum.photos/id/261/300/200\",\n  \"url\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/{{api_version}}/courses",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"courses"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "201 - Create 12th course",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Declare request- and response data, set environment variable",
									"const requestData = pm.request.body.raw ? JSON.parse(pm.request.body.raw) : {};",
									"const jsonData = pm.response.json()[\"course\"]; // Course is needed",
									"pm.environment.set(\"course_id12\", jsonData._id);",
									"",
									"// Test assertions for HTTP status code",
									"pm.test(\"Status code 201 - created\", () => {",
									"\tpm.response.to.have.status(201);",
									"});",
									"",
									"// Document has all necessary properties",
									"pm.test(\"Response contains all necessary properties and courseID is not 0\", () => {",
									"\tpm.expect(jsonData).to.have.property(\"name\");",
									"\tpm.expect(jsonData).to.have.property(\"topics\");",
									"\tpm.expect(jsonData).to.have.property(\"difficulty\");",
									"\tpm.expect(jsonData).to.have.property(\"description\");",
									"\tpm.expect(jsonData).to.have.property(\"releaseYear\");",
									"\tpm.expect(jsonData).to.have.property(\"provider\");",
									"\tpm.expect(jsonData).to.have.property(\"instructor\");",
									"\tpm.expect(jsonData).to.have.property(\"certificate\");",
									"\tpm.expect(jsonData).to.have.property(\"accessType\");",
									"\tpm.expect(jsonData).to.have.property(\"photo\");",
									"\tpm.expect(jsonData).to.have.property(\"url\");",
									"});",
									"",
									"// Loop through and compare request data to response data",
									"pm.test(\"Response matches all input data\", () => {",
									"\tObject.keys(requestData).forEach(key => {",
									"\t\tpm.test(`Field matches for: ${key}`, () => {",
									"\t\t\tpm.expect(jsonData[key]).to.eql(requestData[key]);",
									"\t\t});",
									"\t});",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Lorem ipsum...\",\n  \"topics\": [\"{{topic_7}}\"],\n  \"difficulty\": \"Beginner\",\n  \"description\": \"Lorem ipsum...\",\n  \"releaseYear\": 2022,\n  \"provider\": \"Udemy\",\n  \"instructor\": \"John Doe\",\n  \"certificate\": \"No\",\n  \"accessType\": \"Free\",\n  \"photo\": \"https://picsum.photos/id/265/300/200\",\n  \"url\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/{{api_version}}/courses",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"courses"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "201 - Create new review",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Declare request- and response data, set environment variable",
									"const requestData = pm.request.body.raw ? JSON.parse(pm.request.body.raw) : {};",
									"const jsonData = pm.response.json();",
									"",
									"if (jsonData.error) {",
									"\tpm.test(\"Status code 400\", () => {",
									"\t\tpm.response.to.have.status(400);",
									"\t})",
									"\treturn",
									"}",
									"",
									"const reviewData = jsonData[\"savedReview\"]; // Review is needed",
									"pm.environment.set(\"review_id\", reviewData._id);",
									"",
									"// Test assertions for HTTP status code",
									"pm.test(\"Status code 201 - created\", () => {",
									"\tpm.response.to.have.status(201);",
									"});",
									"",
									"// Loop through and compare request data to response data",
									"pm.test(\"Response matches all input data\", () => {",
									"\tObject.keys(requestData).forEach(key => {",
									"\t\tpm.test(`Field matches for: ${key}`, () => {",
									"\t\t\tpm.expect(reviewData[key]).to.eql(requestData[key]);",
									"\t\t});",
									"\t});",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"engagementLevel\": 4,\n    \"practicalValue\": 4,\n    \"instructorQuality\": 3,\n    \"difficultyLevel\": 4,\n    \"comment\": \"Simple but effective course!\",\n    \"hasCompleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/{{api_version}}/users/{{user_id}}/courses/{{course_id}}/reviews",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"users",
								"{{user_id}}",
								"courses",
								"{{course_id}}",
								"reviews"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "201 - Create second review",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Declare request- and response data, set environment variable",
									"const requestData = pm.request.body.raw ? JSON.parse(pm.request.body.raw) : {};",
									"const jsonData = pm.response.json();",
									"",
									"if (jsonData.error) {",
									"\tpm.test(\"Status code 400\", () => {",
									"\t\tpm.response.to.have.status(400);",
									"\t})",
									"\treturn",
									"}",
									"",
									"const reviewData = jsonData[\"savedReview\"]; // Review is needed",
									"pm.environment.set(\"review_id2\", reviewData._id);",
									"",
									"// Test assertions for HTTP status code",
									"pm.test(\"Status code 201 - created\", () => {",
									"\tpm.response.to.have.status(201);",
									"});",
									"",
									"// Loop through and compare request data to response data",
									"pm.test(\"Response matches all input data\", () => {",
									"\tObject.keys(requestData).forEach(key => {",
									"\t\tpm.test(`Field matches for: ${key}`, () => {",
									"\t\t\tpm.expect(reviewData[key]).to.eql(requestData[key]);",
									"\t\t});",
									"\t});",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"engagementLevel\": 3,\n    \"practicalValue\": 2,\n    \"instructorQuality\": 3,\n    \"difficultyLevel\": 3,\n    \"comment\": \"Simple but effective course!\",\n    \"hasCompleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/{{api_version}}/users/{{user_id2}}/courses/{{course_id2}}/reviews",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"users",
								"{{user_id2}}",
								"courses",
								"{{course_id2}}",
								"reviews"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "201 - Create third review",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Declare request- and response data, set environment variable",
									"const requestData = pm.request.body.raw ? JSON.parse(pm.request.body.raw) : {};",
									"const jsonData = pm.response.json();",
									"",
									"if (jsonData.error) {",
									"\tpm.test(\"Status code 400\", () => {",
									"\t\tpm.response.to.have.status(400);",
									"\t})",
									"\treturn",
									"}",
									"",
									"const reviewData = jsonData[\"savedReview\"]; // Review is needed",
									"pm.environment.set(\"review_id3\", reviewData._id);",
									"",
									"// Test assertions for HTTP status code",
									"pm.test(\"Status code 201 - created\", () => {",
									"\tpm.response.to.have.status(201);",
									"});",
									"",
									"// Loop through and compare request data to response data",
									"pm.test(\"Response matches all input data\", () => {",
									"\tObject.keys(requestData).forEach(key => {",
									"\t\tpm.test(`Field matches for: ${key}`, () => {",
									"\t\t\tpm.expect(reviewData[key]).to.eql(requestData[key]);",
									"\t\t});",
									"\t});",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"engagementLevel\": 5,\n    \"practicalValue\": 3,\n    \"instructorQuality\": 3,\n    \"difficultyLevel\": 4,\n    \"comment\": \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\",\n    \"hasCompleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/{{api_version}}/users/{{user_id}}/courses/{{course_id3}}/reviews",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"users",
								"{{user_id}}",
								"courses",
								"{{course_id3}}",
								"reviews"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "201 - Create fourth review",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Declare request- and response data, set environment variable",
									"const requestData = pm.request.body.raw ? JSON.parse(pm.request.body.raw) : {};",
									"const jsonData = pm.response.json();",
									"",
									"if (jsonData.error) {",
									"\tpm.test(\"Status code 400\", () => {",
									"\t\tpm.response.to.have.status(400);",
									"\t})",
									"\treturn",
									"}",
									"",
									"const reviewData = jsonData[\"savedReview\"]; // Review is needed",
									"pm.environment.set(\"review_id3\", reviewData._id);",
									"",
									"// Test assertions for HTTP status code",
									"pm.test(\"Status code 201 - created\", () => {",
									"\tpm.response.to.have.status(201);",
									"});",
									"",
									"// Loop through and compare request data to response data",
									"pm.test(\"Response matches all input data\", () => {",
									"\tObject.keys(requestData).forEach(key => {",
									"\t\tpm.test(`Field matches for: ${key}`, () => {",
									"\t\t\tpm.expect(reviewData[key]).to.eql(requestData[key]);",
									"\t\t});",
									"\t});",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"engagementLevel\": 5,\n    \"practicalValue\": 3,\n    \"instructorQuality\": 3,\n    \"difficultyLevel\": 4,\n    \"comment\": \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\",\n    \"hasCompleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/{{api_version}}/users/{{user_id2}}/courses/{{course_id3}}/reviews",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"users",
								"{{user_id2}}",
								"courses",
								"{{course_id3}}",
								"reviews"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "201 - Create new courseList",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Declare request- and response data, set environment variable",
									"const requestData = pm.request.body.raw ? JSON.parse(pm.request.body.raw) : {};",
									"const jsonData = pm.response.json(); // User is needed",
									"pm.environment.set(\"course_list_id\", jsonData._id);",
									"",
									"// Test assertions for HTTP status code",
									"pm.test(\"Status code 201 - created\", () => {",
									"\tpm.response.to.have.status(201);",
									"});",
									"",
									"// Document has all necessary properties",
									"pm.test(\"Response contains all necessary properties\", () => {",
									"\tpm.expect(jsonData).to.have.property(\"name\");",
									"\tpm.expect(jsonData).to.have.property(\"creationDate\");",
									"\tpm.expect(jsonData).to.have.property(\"user\");",
									"\tpm.expect(jsonData).to.have.property(\"description\");",
									"\tpm.expect(jsonData).to.have.property(\"courses\");",
									"});",
									"",
									"// Loop through and compare request data to response data",
									"pm.test(\"Response matches all input data\", () => {",
									"\tObject.keys(requestData).forEach(key => {",
									"\t\tpm.test(`Field matches for: ${key}`, () => {",
									"\t\t\tpm.expect(jsonData[key]).to.eql(requestData[key]);",
									"\t\t});",
									"\t});",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"CS-stuff\",\n    \"description\": \"Computer science related topics\",\n    \"courses\":  [\"{{course_id}}\", \"{{course_id2}}\"]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/{{api_version}}/users/{{user_id}}/course-lists",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"users",
								"{{user_id}}",
								"course-lists"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "201 - Create second courseList",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Declare request- and response data, set environment variable",
									"const requestData = pm.request.body.raw ? JSON.parse(pm.request.body.raw) : {};",
									"const jsonData = pm.response.json(); // User is needed",
									"pm.environment.set(\"course_list_id2\", jsonData._id);",
									"",
									"// Test assertions for HTTP status code",
									"pm.test(\"Status code 201 - created\", () => {",
									"\tpm.response.to.have.status(201);",
									"});",
									"",
									"// Document has all necessary properties",
									"pm.test(\"Response contains all necessary properties\", () => {",
									"\tpm.expect(jsonData).to.have.property(\"name\");",
									"\tpm.expect(jsonData).to.have.property(\"creationDate\");",
									"\tpm.expect(jsonData).to.have.property(\"user\");",
									"\tpm.expect(jsonData).to.have.property(\"description\");",
									"\tpm.expect(jsonData).to.have.property(\"courses\");",
									"});",
									"",
									"// Loop through and compare request data to response data",
									"pm.test(\"Response matches all input data\", () => {",
									"\tObject.keys(requestData).forEach(key => {",
									"\t\tpm.test(`Field matches for: ${key}`, () => {",
									"\t\t\tpm.expect(jsonData[key]).to.eql(requestData[key]);",
									"\t\t});",
									"\t});",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"CS-related\",\n    \"description\": \"Computer science related topics\",\n    \"courses\": [\"{{course_id}}\"]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/{{api_version}}/users/{{user_id2}}/course-lists",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"users",
								"{{user_id2}}",
								"course-lists"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "201 - Create third courseList",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Declare request- and response data, set environment variable",
									"const requestData = pm.request.body.raw ? JSON.parse(pm.request.body.raw) : {};",
									"const jsonData = pm.response.json(); // User is needed",
									"pm.environment.set(\"course_list_id3\", jsonData._id);",
									"",
									"// Test assertions for HTTP status code",
									"pm.test(\"Status code 201 - created\", () => {",
									"\tpm.response.to.have.status(201);",
									"});",
									"",
									"// Document has all necessary properties",
									"pm.test(\"Response contains all necessary properties\", () => {",
									"\tpm.expect(jsonData).to.have.property(\"name\");",
									"\tpm.expect(jsonData).to.have.property(\"creationDate\");",
									"\tpm.expect(jsonData).to.have.property(\"user\");",
									"\tpm.expect(jsonData).to.have.property(\"description\");",
									"\tpm.expect(jsonData).to.have.property(\"courses\");",
									"});",
									"",
									"// Loop through and compare request data to response data",
									"pm.test(\"Response matches all input data\", () => {",
									"\tObject.keys(requestData).forEach(key => {",
									"\t\tpm.test(`Field matches for: ${key}`, () => {",
									"\t\t\tpm.expect(jsonData[key]).to.eql(requestData[key]);",
									"\t\t});",
									"\t});",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"CS-stuff\",\n    \"description\": \"Computer science stuff\",\n    \"courses\": [\"{{course_id2}}\"]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/{{api_version}}/users/{{user_id2}}/course-lists",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"users",
								"{{user_id2}}",
								"course-lists"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				}
			]
		},
		{
			"name": "Users",
			"item": [
				{
					"name": "409 - Create conflicting user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test user creationg to assert conflicting user",
									"pm.test(\"Create conflicting user\", () => {",
									"\tpm.response.to.have.status(409);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"mrBagel34\",\n\t\"email\": \"mrbagel_34@gmail.com\",\n\t\"password\": \"Sunshine34\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/{{api_version}}/auth/register",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "401 - Sign in with invalid password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code 401 - Invalid password\", () => {",
									"\tpm.response.to.have.status(401);",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"mrBagel34\",\n\t\"password\": \"12345dfdsf\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/{{api_version}}/auth/signin",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"auth",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 - Edit user data on user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Declare request- and response data",
									"const jsonData = pm.response.json();",
									"const requestData = pm.request.body.raw ? JSON.parse(pm.request.body.raw) : {};",
									"",
									"pm.test(\"Successful PATCH request - status 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Check other fields that should never have null values",
									"pm.test(\"PATCH request kept other field(s) intact\", () => {",
									"\tpm.expect(jsonData.username).to.be.a('string').and.is.not.empty;",
									"\tpm.expect(jsonData.email).to.be.a('string').and.is.not.empty;",
									"\tpm.expect(jsonData.password).to.be.a('string').and.is.not.empty;",
									"});",
									"",
									"// Loop through and compare request data to response data",
									"pm.test(\"Response matches input data\", () => {",
									"\tObject.keys(requestData).forEach(key => {",
									"\t\tpm.test(`Field matches for: ${key}`, () => {",
									"\t\t\tpm.expect(jsonData[key]).to.eql(requestData[key]);",
									"\t\t});",
									"\t});",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"photo\": \"/src/test2.png\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/{{api_version}}/users/{{user_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"users",
								"{{user_id}}"
							]
						},
						"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "403 - User attempts to edit another user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"PATCH request status 403 - not allowed to edit another user\", () => {",
									"    pm.response.to.have.status(403);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"photo\": \"/src/test2.png\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/{{api_version}}/users/{{user_id2}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"users",
								"{{user_id2}}"
							]
						},
						"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "200 - Admin edits another user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Declare request- and response data",
									"const jsonData = pm.response.json();",
									"const requestData = pm.request.body.raw ? JSON.parse(pm.request.body.raw) : {};",
									"",
									"pm.test(\"Successful PATCH request - status 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Check other fields that should never have null values",
									"pm.test(\"PATCH request kept other field(s) intact\", () => {",
									"\tpm.expect(jsonData.username).to.be.a('string').and.is.not.empty;",
									"\tpm.expect(jsonData.email).to.be.a('string').and.is.not.empty;",
									"\tpm.expect(jsonData.password).to.be.a('string').and.is.not.empty;",
									"});",
									"",
									"// Loop through and compare request data to response data",
									"pm.test(\"Response matches input data\", () => {",
									"\tObject.keys(requestData).forEach(key => {",
									"\t\tpm.test(`Field matches for: ${key}`, () => {",
									"\t\t\tpm.expect(jsonData[key]).to.eql(requestData[key]);",
									"\t\t});",
									"\t});",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"photo\": \"/src/test2.png\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/{{api_version}}/users/{{user_id2}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"users",
								"{{user_id2}}"
							]
						},
						"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "200 - Edit user data on user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Declare request- and response data",
									"const jsonData = pm.response.json();",
									"const requestData = pm.request.body.raw ? JSON.parse(pm.request.body.raw) : {};",
									"",
									"pm.test(\"Successful PUT request - status 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Check other fields that should never have null values",
									"pm.test(\"PATCH request kept other field(s) intact\", () => {",
									"\tpm.expect(jsonData.username).to.be.a('string').and.is.not.empty;",
									"\tpm.expect(jsonData.email).to.be.a('string').and.is.not.empty;",
									"\tpm.expect(jsonData.password).to.be.a('string').and.is.not.empty;",
									"});",
									"",
									"// Loop through and compare request data to response data",
									"pm.test(\"Response matches input data\", () => {",
									"\tObject.keys(requestData).forEach(key => {",
									"\t\tpm.test(`Field matches for: ${key}`, () => {",
									"\t\t\tpm.expect(jsonData[key]).to.eql(requestData[key]);",
									"\t\t});",
									"\t});",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"photo\": null,\n    \"interests\": [],\n    \"recommendationList\": [],\n    \"courseLists\": []\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/{{api_version}}/users/{{user_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"users",
								"{{user_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "403 - User attempts to edit another user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"PUT request status 403 - not allowed access to another user\", () => {",
									"    pm.response.to.have.status(403);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"photo\": null,\n    \"interests\": [],\n    \"recommendationList\": [],\n    \"courseLists\": []\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/{{api_version}}/users/{{user_id2}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"users",
								"{{user_id2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 - Admin edits another user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Declare request- and response data",
									"const jsonData = pm.response.json();",
									"const requestData = pm.request.body.raw ? JSON.parse(pm.request.body.raw) : {};",
									"",
									"pm.test(\"Successful PUT request - status 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Check other fields that should never have null values",
									"pm.test(\"PATCH request kept other field(s) intact\", () => {",
									"\tpm.expect(jsonData.username).to.be.a('string').and.is.not.empty;",
									"\tpm.expect(jsonData.email).to.be.a('string').and.is.not.empty;",
									"\tpm.expect(jsonData.password).to.be.a('string').and.is.not.empty;",
									"});",
									"",
									"// Loop through and compare request data to response data",
									"pm.test(\"Response matches input data\", () => {",
									"\tObject.keys(requestData).forEach(key => {",
									"\t\tpm.test(`Field matches for: ${key}`, () => {",
									"\t\t\tpm.expect(jsonData[key]).to.eql(requestData[key]);",
									"\t\t});",
									"\t});",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"photo\": null,\n    \"interests\": [],\n    \"recommendationList\": [],\n    \"courseLists\": []\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/{{api_version}}/users/{{user_id2}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"users",
								"{{user_id2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "403 - User attempts to show all users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403 - need admin access to see all users\", function () {",
									"    pm.response.to.have.status(403);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/api/{{api_version}}/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 - Admin shows all users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Declare response data",
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (Array.isArray(jsonData)) {",
									"jsonData.forEach((user) => {",
									"\tpm.test(`Check userID: ${user._id}`, () => {",
									"\t\tpm.expect(user).to.have.property(\"username\");",
									"\t\tpm.expect(user).to.have.property(\"email\");",
									"\t\tpm.expect(user).to.have.property(\"password\");",
									"\t\tpm.expect(user).to.have.property(\"photo\");",
									"\t\tpm.expect(user).to.have.property(\"interests\");",
									"\t\tpm.expect(user).to.have.property(\"recommendationList\");",
									"\t\tpm.expect(user).to.have.property(\"courseLists\");",
									"\t});",
									"});",
									"}else {",
									"    pm.test(\"Response is not an array\", function(){",
									"        pm.expect(jsonData).to.be.an('array');",
									"    });",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/api/{{api_version}}/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 - Show specific User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Declare response data",
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Document has all necessary properties",
									"pm.test(\"Response contains all necessary properties\", () => {",
									"\tpm.expect(jsonData).to.have.property(\"username\");",
									"\tpm.expect(jsonData).to.have.property(\"email\");",
									"\tpm.expect(jsonData).to.have.property(\"password\");",
									"\tpm.expect(jsonData).to.have.property(\"photo\");",
									"\tpm.expect(jsonData).to.have.property(\"interests\");",
									"\tpm.expect(jsonData).to.have.property(\"recommendationList\");",
									"\tpm.expect(jsonData).to.have.property(\"courseLists\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/{{api_version}}/users/{{user_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"users",
								"{{user_id}}"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "404 - Show user that does not exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Status code is 404 - user does not exist\", () => {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/{{api_version}}/users/{{not_existing_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"users",
								"{{not_existing_id}}"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "403 - User attempts to delete a user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"User has no access to deletion of another user - status 403\", () => {",
									"    pm.response.to.have.status(403);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/{{api_version}}/users/{{user_id3}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"users",
								"{{user_id3}}"
							]
						},
						"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "200 - Admin deletes user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let user_id3 = pm.environment.get(\"user_id3\");",
									"",
									"pm.test(`Successfully deleted user ${user_id3} - status 200`, () => {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/{{api_version}}/users/{{user_id3}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"users",
								"{{user_id3}}"
							]
						},
						"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "404 - Admin deletes user that no longer exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"User not found - status 404\", () => {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/{{api_version}}/users/{{not_existing_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"users",
								"{{not_existing_id}}"
							]
						},
						"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "400 - Admin deletes with invalid id format",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"DELETE status 400 - invalid ID format\", () => {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/{{api_version}}/users/{{not_valid_id_format}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"users",
								"{{not_valid_id_format}}"
							]
						},
						"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
					},
					"response": []
				}
			]
		},
		{
			"name": "Topics",
			"item": [
				{
					"name": "200 - Get all topics",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status 200 - Topics received\", () => {",
									"  pm.response.to.have.status(200);",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/{{api_version}}/topics",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"topics"
							]
						}
					},
					"response": []
				},
				{
					"name": "404 - Get topic that does not exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status 404 - Topic does not exist\", () => {",
									"  pm.response.to.have.status(404);",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/{{api_version}}/topics/{{not_existing_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"topics",
								"{{not_existing_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "404 - Get topic that does not exist Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status 404 - Topic does not exist\", () => {",
									"  pm.response.to.have.status(404);",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/{{api_version}}/topics/{{not_existing_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"topics",
								"{{not_existing_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Courses",
			"item": [
				{
					"name": "401 - Attempt creating course without token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test assertions for HTTP status code",
									"pm.test(\"Status code 401 - need valid token (logged in user)\", () => {",
									"\tpm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Mechanical Engineering for dummies\",\n  \"topics\": [],\n  \"difficulty\": \"Beginner\",\n  \"description\": \"No prior knowledge in mechanical engineering needed.\",\n  \"averageRating\": null,\n  \"releaseYear\": 2022,\n  \"provider\": \"PluralSight\",\n  \"instructor\": \"Jacob Strong\",\n  \"certificate\": \"No\",\n  \"accessType\": \"Free\",\n  \"url\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/{{api_version}}/courses",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"courses"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "200 - Edit course data on course",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Declare request- and response data",
									"const requestData = pm.request.body.raw ? JSON.parse(pm.request.body.raw) : {};",
									"const jsonData = pm.response.json()['updatedCourse']; // updatedCourse is needed",
									"",
									"pm.test(\"Successful PATCH request - status 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Check other fields that should never have null values",
									"pm.test(\"PATCH request kept other field(s) intact\", () => {",
									"\tpm.expect(jsonData.name).to.be.a('string').and.is.not.empty;",
									"\tpm.expect(jsonData.topics).to.be.a('array').and.is.not.empty;",
									"\tpm.expect(jsonData.difficulty).to.be.a('string').and.is.not.empty;",
									"\tpm.expect(jsonData.releaseYear).to.be.a('number').and.is.not.eql(0);",
									"\tpm.expect(jsonData.provider).to.be.a('string').and.is.not.empty;",
									"});",
									"",
									"// Loop through and compare request data to response data",
									"pm.test(\"Response matches input data\", () => {",
									"\tObject.keys(requestData).forEach(key => {",
									"\t\tpm.test(`Field matches for: ${key}`, () => {",
									"\t\t\tpm.expect(jsonData[key]).to.eql(requestData[key]);",
									"\t\t});",
									"\t});",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"photo\": \"https://picsum.photos/id/250/300/200\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/{{api_version}}/courses/{{course_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"courses",
								"{{course_id}}"
							]
						},
						"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "404 - Edit course data on non-existing course",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"PUT request status 404 - course does not exist\", () => {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"photo\": \"https://picsum.photos/id/250/300/200\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/{{api_version}}/courses/{{not_existing_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"courses",
								"{{not_existing_id}}"
							]
						},
						"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "200 - Edit course data on course",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Declare request- and response data",
									"const jsonData = pm.response.json()[\"updatedCourse\"]; // updatedCourse is needed",
									"const requestData = pm.request.body.raw ? JSON.parse(pm.request.body.raw) : {};",
									"",
									"pm.test(\"Successful PUT request - status 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Check other fields that should never have null values",
									"pm.test(\"PATCH request kept other field(s) intact\", () => {",
									"\tpm.expect(jsonData.name).to.be.a('string').and.is.not.empty;",
									"\tpm.expect(jsonData.topics).to.be.a('array').and.is.not.empty;",
									"\tpm.expect(jsonData.difficulty).to.be.a('string').and.is.not.empty;",
									"\tpm.expect(jsonData.releaseYear).to.be.a('number').and.is.not.eql(0);",
									"\tpm.expect(jsonData.provider).to.be.a('string').and.is.not.empty;",
									"});",
									"",
									"// Loop through and compare request data to response data",
									"pm.test(\"Response matches input data\", () => {",
									"\tObject.keys(requestData).forEach(key => {",
									"\t\tpm.test(`Field matches for: ${key}`, () => {",
									"\t\t\tpm.expect(jsonData[key]).to.eql(requestData[key]);",
									"\t\t});",
									"\t});",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"C Programming for Everybody\",\n  \"topics\": [\"{{topic_2}}\"],\n  \"difficulty\": \"Beginner\",\n  \"description\": \"Course dedicated to understanding computer architecture and low-level programming by studying the 'classic' version of the C Programming language from the 1978 booking by Brian W. Kernighan.\",\n  \"releaseYear\": 2022,\n  \"provider\": \"FreeCodeCamp\",\n  \"instructor\": \"Dr. Charles R. Severance\",\n  \"certificate\": \"No\",\n  \"accessType\": \"Free\",\n\t\"photo\": \"https://picsum.photos/id/250/300/200\",\n  \"url\": \"https://www.freecodecamp.org/news/complete-c-programming-course-from-dr-chuck/\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/{{api_version}}/courses/{{course_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"courses",
								"{{course_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "404 - Edit course data on non-existing course",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"PUT request status 404 - course does not exist\", () => {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"photo\": \"/src/test3.png\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/{{api_version}}/courses/{{not_existing_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"courses",
								"{{not_existing_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 - Show all courses",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Declare response data",
									"const jsonData = pm.response.json()[\"courses\"]; // courses is needed",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"jsonData.forEach((course) => {",
									"\tpm.test(`Check courseID: ${course._id}`, () => {",
									"\t\tpm.expect(course).to.have.property(\"name\");",
									"\t\tpm.expect(course).to.have.property(\"topics\");",
									"\t\tpm.expect(course).to.have.property(\"difficulty\");",
									"\t\tpm.expect(course).to.have.property(\"description\");",
									"\t\tpm.expect(course).to.have.property(\"averageRating\");",
									"\t\tpm.expect(course).to.have.property(\"releaseYear\");",
									"\t\tpm.expect(course).to.have.property(\"provider\");",
									"\t\tpm.expect(course).to.have.property(\"instructor\");",
									"\t\tpm.expect(course).to.have.property(\"certificate\");",
									"\t\tpm.expect(course).to.have.property(\"accessType\");",
									"\t\tpm.expect(course).to.have.property(\"photo\");",
									"\t\tpm.expect(course).to.have.property(\"url\");",
									"\t});",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "host",
								"value": "http://localhost:3000",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/{{api_version}}/courses",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"courses"
							],
							"query": [
								{
									"key": "host",
									"value": "l",
									"disabled": true
								}
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "200 - Show specific course",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Declare response data",
									"const jsonData = pm.response.json()[\"course\"]; // course is needed",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Document has all necessary properties",
									"pm.test(\"Response contains all necessary properties\", () => {",
									"\tpm.expect(jsonData).to.have.property(\"name\");",
									"\tpm.expect(jsonData).to.have.property(\"topics\");",
									"\tpm.expect(jsonData).to.have.property(\"difficulty\");",
									"\tpm.expect(jsonData).to.have.property(\"description\");",
									"\tpm.expect(jsonData).to.have.property(\"releaseYear\");",
									"\tpm.expect(jsonData).to.have.property(\"provider\");",
									"\tpm.expect(jsonData).to.have.property(\"instructor\");",
									"\tpm.expect(jsonData).to.have.property(\"certificate\");",
									"\tpm.expect(jsonData).to.have.property(\"accessType\");",
									"\tpm.expect(jsonData).to.have.property(\"photo\");",
									"\tpm.expect(jsonData).to.have.property(\"url\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{host}}/api/{{api_version}}/courses/{{course_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"courses",
								"{{course_id}}"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "404 - Show course that does not exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"GET request status 404 - course does not exist\", () => {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{host}}/api/{{api_version}}/courses/{{not_existing_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"courses",
								"{{not_existing_id}}"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "403 - User attempts to delete course",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", () => {",
									"    pm.response.to.have.status(403);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/{{api_version}}/courses/{{course_id3}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"courses",
								"{{course_id3}}"
							]
						},
						"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "200 - Admin deletes course",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/{{api_version}}/courses/{{course_id3}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"courses",
								"{{course_id3}}"
							]
						},
						"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "404 - Admin deletes course that no longer exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"DELETE request status 404 - course does not exist\", () => {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/{{api_version}}/courses/{{not_existing_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"courses",
								"{{not_existing_id}}"
							]
						},
						"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "400 - Admin deletes with invalid id format",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"DELETE request status 400 - Invalid format\", () => {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/{{api_version}}/courses/{{not_valid_id_format}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"courses",
								"{{not_valid_id_format}}"
							]
						},
						"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
					},
					"response": []
				}
			]
		},
		{
			"name": "Reviews",
			"item": [
				{
					"name": "401 - Attempt creating review without token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test assertions for HTTP status code",
									"pm.test(\"Status code 401 - token required (not logged in)\", () => {",
									"\tpm.response.to.have.status(401);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"engagementLevel\": 5,\n    \"practicalValue\": 3,\n    \"instructorQuality\": 3,\n    \"difficultyLevel\": 4,\n    \"comment\": \"Intersting and good course!\",\n    \"hasCompleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/{{api_version}}/reviews",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"reviews"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "400 - Create review w/o user_id & course_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code 400 - userID and/or courseID missing\", () => {",
									"    pm.response.to.have.status(400);",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"rating\": [3, 3, 1, 3],\n    \"comment\": \"Intersting and good course!\",\n    \"hasCompleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/{{api_version}}/reviews",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"reviews"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "400 - Create review w/o user_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code 400 - userID missing\", () => {",
									"    pm.response.to.have.status(400);",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"rating\": [3, 3, 1, 3],\n    \"comment\": \"Intersting and good course!\",\n    \"hasCompleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/{{api_version}}/courses/{{course_id}}/reviews",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"courses",
								"{{course_id}}",
								"reviews"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "400 - Create review w/o course_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code 400 - courseID missing\", () => {",
									"    pm.response.to.have.status(400);",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"rating\": [3, 3, 1, 3],\n    \"comment\": \"Intersting and good course!\",\n    \"hasCompleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/{{api_version}}/users/{{user_id}}/reviews",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"users",
								"{{user_id}}",
								"reviews"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "200 - Edit review data on review",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Declare request- and response data",
									"const jsonData = pm.response.json()['updatedReview'];",
									"console.log(jsonData)",
									"const requestData = pm.request.body.raw ? JSON.parse(pm.request.body.raw) : {};",
									"",
									"pm.test(\"Successful PATCH request - status 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Loop through and compare request data to response data",
									"pm.test(\"Response matches input data\", () => {",
									"\tObject.keys(requestData).forEach(key => {",
									"        console.log(requestData[key], jsonData[key]);",
									"\t\tpm.test(`Field matches for: ${key}`, () => {",
									"\t\t\tpm.expect(jsonData[key]).to.eql(requestData[key]);",
									"\t\t});",
									"\t});",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"comment\": \"Simple but effective course!\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/{{api_version}}/users/{{user_id}}/courses/{{course_id}}/reviews/{{review_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"users",
								"{{user_id}}",
								"courses",
								"{{course_id}}",
								"reviews",
								"{{review_id}}"
							]
						},
						"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "403 - User attempts to edit another user's review",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"PATCH request status 403\", () => {",
									"    pm.response.to.have.status(403);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"comment\": \"Simple but effective course!\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/{{api_version}}/users/{{user_id}}/courses/{{course_id}}/reviews/{{review_id2}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"users",
								"{{user_id}}",
								"courses",
								"{{course_id}}",
								"reviews",
								"{{review_id2}}"
							]
						},
						"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "400 - Edit review data on non-existing review",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"PATCH request status 404 - review not found\", () => {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"comment\": \"Simple but effective course!\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/{{api_version}}/users/{{user_id}}/courses/{{course_id}}/reviews/{{not_existing_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"users",
								"{{user_id}}",
								"courses",
								"{{course_id}}",
								"reviews",
								"{{not_existing_id}}"
							]
						},
						"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "200 - Edit review data on review",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Declare request- and response data",
									"const jsonData = pm.response.json()['updatedReview'];",
									"const requestData = pm.request.body.raw ? JSON.parse(pm.request.body.raw) : {};",
									"",
									"pm.test(\"Successful PUT request - status 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Loop through and compare request data to response data",
									"pm.test(\"Response matches input data\", () => {",
									"\tObject.keys(requestData).forEach(key => {",
									"\t\tpm.test(`Field matches for: ${key}`, () => {",
									"\t\t\tpm.expect(jsonData[key]).to.eql(requestData[key]);",
									"\t\t});",
									"\t});",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const currentDate = new Date().toISOString();",
									"pm.environment.set(\"currentDate\", currentDate);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"user\": \"{{user_id}}\",\n    \"course\": \"{{course_id}}\",\n    \"date\": \"{{currentDate}}\",\n    \"comment\": \"Update: Lorem ipsum...\",\n    \"hasCompleted\": false\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/{{api_version}}/users/{{user_id}}/courses/{{course_id}}/reviews/{{review_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"users",
								"{{user_id}}",
								"courses",
								"{{course_id}}",
								"reviews",
								"{{review_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "403 - User attempts to edit another user's review",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"PUT request status 403\", () => {",
									"    pm.response.to.have.status(403);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const currentDate = new Date().toISOString();",
									"pm.environment.set(\"currentDate\", currentDate);",
									"",
									"console.log(currentDate);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"user\": \"{{user_id}}\",\n    \"course\": \"{{course_id}}\",\n    \"date\": \"{{currentDate}}\",\n    \"comment\": \"Update: Lorem ipsum...\",\n    \"hasCompleted\": false\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/{{api_version}}/users/{{user_id}}/courses/{{course_id}}/reviews/{{review_id2}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"users",
								"{{user_id}}",
								"courses",
								"{{course_id}}",
								"reviews",
								"{{review_id2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "400 - Edit review data on non-existing review",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"PUT request status 404 - review not found\", () => {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"user\": \"{{user_id}}\",\n    \"course\": \"{{course_id}}\",\n    \"date\": \"{{currentDate}}\",\n\t\"comment\": \"Update: Lorem ipsum...\",\n\t\"hasCompleted\": false\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/{{api_version}}/users/{{user_id}}/courses/{{course_id}}/reviews/{{not_existing_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"users",
								"{{user_id}}",
								"courses",
								"{{course_id}}",
								"reviews",
								"{{not_existing_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 - Show all reviews",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Declare response data",
									"const jsonData = pm.response.json()[\"reviews\"]; // reviews is needed",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/{{api_version}}/reviews",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"reviews"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 - Show all reviews of a course",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Declare response data",
									"const jsonData = pm.response.json()[\"reviews\"]; // reviews is needed",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const course_id = pm.environment.get('course_id');",
									"",
									"jsonData.forEach((review) => {",
									"\tpm.test(`Check all properties for reviewID: ${review._id} and connected to courseID: ${course_id}`, () => {",
									"\t\tpm.expect(review).to.have.property(\"user\");",
									"\t\tpm.expect(review).to.have.property(\"course\");",
									"\t\tpm.expect(review).to.have.property(\"date\");",
									"\t\tpm.expect(review).to.have.property(\"comment\");",
									"\t\tpm.expect(review).to.have.property(\"hasCompleted\");",
									"\t});",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/{{api_version}}/courses/{{course_id}}/reviews",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"courses",
								"{{course_id}}",
								"reviews"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 - Show all reviews of a user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Declare response data",
									"const jsonData = pm.response.json()[\"reviews\"]; // reviews is needed",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const user_id = pm.environment.get('user_id');",
									"",
									"jsonData.forEach((review) => {",
									"\tpm.test(`Check all properties for reviewID: ${review._id} and connected to courseID: ${user_id}`, () => {",
									"\t\tpm.expect(review).to.have.property(\"user\");",
									"\t\tpm.expect(review).to.have.property(\"course\");",
									"\t\tpm.expect(review).to.have.property(\"date\");",
									"\t\tpm.expect(review).to.have.property(\"comment\");",
									"\t\tpm.expect(review).to.have.property(\"hasCompleted\");",
									"\t});",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/api/{{api_version}}/users/{{user_id}}/courses/{{course_id}}/reviews",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"users",
								"{{user_id}}",
								"courses",
								"{{course_id}}",
								"reviews"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 - Show review from user and course",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Declare response data",
									"const jsonData = pm.response.json()[\"review\"]; // reviews is needed",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(`Check all properties for reviewID: ${jsonData._id}`, () => {",
									"    pm.expect(jsonData).to.have.property(\"user\");",
									"    pm.expect(jsonData).to.have.property(\"course\");",
									"    pm.expect(jsonData).to.have.property(\"date\");",
									"    pm.expect(jsonData).to.have.property(\"comment\");",
									"    pm.expect(jsonData).to.have.property(\"hasCompleted\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/{{api_version}}/users/{{user_id}}/courses/{{course_id}}/reviews/{{review_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"users",
								"{{user_id}}",
								"courses",
								"{{course_id}}",
								"reviews",
								"{{review_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "400 - Attempt to show review that does not exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"GET request status 404 - review not found\", () => {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/{{api_version}}/reviews/{{not_existing_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"reviews",
								"{{not_existing_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "400 - User attempts to delete review",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"DELETE request status 403 - need admin rights\", () => {",
									"    pm.response.to.have.status(403);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/{{api_version}}/reviews/{{review_id3}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"reviews",
								"{{review_id3}}"
							]
						},
						"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "200 - Admin deletes review",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"DELETE request status 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/{{api_version}}/reviews/{{review_id3}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"reviews",
								"{{review_id3}}"
							]
						},
						"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "404 - Admin deletes same review again",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"DELETE request status 404 - review does not exist\", () => {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/{{api_version}}/reviews/{{review_id3}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"reviews",
								"{{review_id3}}"
							]
						},
						"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "400 - User attempts to delete all reviews",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"DELETE request status 403 - need admin rights\", () => {",
									"    pm.response.to.have.status(403);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/{{api_version}}/reviews",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"reviews"
							]
						},
						"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "200 - Admin deletes all reviews",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"All users deleted - status 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/{{api_version}}/reviews",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"reviews"
							]
						},
						"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
					},
					"response": []
				}
			]
		},
		{
			"name": "CourseLists",
			"item": [
				{
					"name": "401 - Attempt to create courseList without token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test assertions for HTTP status code",
									"pm.test(\"Status code 401 - token required (login needed)\", () => {",
									"\tpm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"CS-stuff\",\n    \"description\": \"Computer science stuff\",\n    \"courses\": [\"{{course_id2}}\"]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/{{api_version}}/users/{{user_id2}}/course-lists",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"users",
								"{{user_id2}}",
								"course-lists"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "200 - Edit information on courseList",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Declare request- and response data",
									"const jsonData = pm.response.json();",
									"const requestData = pm.request.body.raw ? JSON.parse(pm.request.body.raw) : {};",
									"",
									"pm.test(\"Successful PATCH request - status 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Check other fields that should never have null values",
									"pm.test(\"PATCH request kept other field(s) intact\", () => {",
									"\tpm.expect(jsonData.name).to.be.a('string');",
									"\tpm.expect(jsonData.creationDate).to.be.a('string').and.is.not.empty; // date as string",
									"\tpm.expect(jsonData.description).to.be.a('string');",
									"\tpm.expect(jsonData.courses).to.be.a('array').and.is.not.empty;",
									"});",
									"",
									"// Loop through and compare request data to response data",
									"pm.test(\"Response matches input data\", () => {",
									"\tObject.keys(requestData).forEach(key => {",
									"\t\tpm.test(`Field matches for: ${key}`, () => {",
									"\t\t\tpm.expect(jsonData[key]).to.eql(requestData[key]);",
									"\t\t});",
									"\t});",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"CS-related courses\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/{{api_version}}/users/{{user_id}}/course-lists/{{course_list_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"users",
								"{{user_id}}",
								"course-lists",
								"{{course_list_id}}"
							]
						},
						"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "403 - User attempts to edit another user's courseList",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"PATCH request status 403\", () => {",
									"    pm.response.to.have.status(403);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"CS-related courses\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/{{api_version}}/users/{{user_id}}/course-lists/{{course_list_id2}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"users",
								"{{user_id}}",
								"course-lists",
								"{{course_list_id2}}"
							]
						},
						"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "400 - Edit information on non-existing courseList",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"PATCH request status 404 - courseList does not exist\", () => {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"CS-related courses\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/{{api_version}}/users/{{user_id}}/course-lists/{{not_existing_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"users",
								"{{user_id}}",
								"course-lists",
								"{{not_existing_id}}"
							]
						},
						"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "200 - Edit information on courseList",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Declare request- and response data",
									"const jsonData = pm.response.json();",
									"const requestData = pm.request.body.raw ? JSON.parse(pm.request.body.raw) : {};",
									"",
									"pm.test(\"Successful PATCH request - status 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Check other fields that should never have null values",
									"pm.test(\"PATCH request kept other field(s) intact\", () => {",
									"\tpm.expect(jsonData.name).to.be.a('string');",
									"\tpm.expect(jsonData.creationDate).to.be.a('string').and.is.not.empty; // date as string",
									"\tpm.expect(jsonData.description).to.be.a('string');",
									"\tpm.expect(jsonData.courses).to.be.a('array');",
									"});",
									"",
									"// Loop through and compare request data to response data",
									"pm.test(\"Response matches input data\", () => {",
									"\tObject.keys(requestData).forEach(key => {",
									"\t\tpm.test(`Field matches for: ${key}`, () => {",
									"\t\t\tpm.expect(jsonData[key]).to.eql(requestData[key]);",
									"\t\t});",
									"\t});",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"CS-related-stuff\",\n    \"description\": \"Computer science related topics\",\n    \"courses\": []\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/{{api_version}}/users/{{user_id}}/course-lists/{{course_list_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"users",
								"{{user_id}}",
								"course-lists",
								"{{course_list_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "403 - User attempts to edit another user's courseList Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"PUT request status 403\", () => {",
									"    pm.response.to.have.status(403);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"CS-related courses\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/{{api_version}}/users/{{user_id}}/course-lists/{{course_list_id2}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"users",
								"{{user_id}}",
								"course-lists",
								"{{course_list_id2}}"
							]
						},
						"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "400 - Edit data on a non-existing courseList",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"PUT request status 404 - courseList does not exist\", () => {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"CS-related stuff\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/{{api_version}}/users/{{user_id}}/course-lists/{{not_existing_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"users",
								"{{user_id}}",
								"course-lists",
								"{{not_existing_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "403 - User attempts to show all courseLists",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", () => {",
									"    pm.response.to.have.status(403);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/{{api_version}}/users/{{user_id}}/course-lists",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"users",
								"{{user_id}}",
								"course-lists"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 - Admin shows all courseLists",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Declare response data",
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const user_id = pm.environment.get('user_id');",
									"",
									"jsonData.forEach((courseList) => {",
									"\tpm.test(`Check all properties for courseListID: ${courseList._id} and connected to userID: ${user_id}`, () => {",
									"\t\tpm.expect(courseList).to.have.property(\"name\");",
									"\t\tpm.expect(courseList).to.have.property(\"creationDate\");",
									"\t\tpm.expect(courseList).to.have.property(\"user\").and.eql(user_id);",
									"\t\tpm.expect(courseList).to.have.property(\"description\");",
									"\t\tpm.expect(courseList).to.have.property(\"courses\");",
									"\t});",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/{{api_version}}/users/{{user_id}}/course-lists",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"users",
								"{{user_id}}",
								"course-lists"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 - User get specific courseList (they own)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Declare response data",
									"const jsonData = pm.response.json();",
									"",
									"",
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"// Document has all necessary properties",
									"pm.test(\"Response contains all necessary properties\", () => {",
									"\tpm.expect(jsonData).to.have.property(\"name\");",
									"\tpm.expect(jsonData).to.have.property(\"creationDate\");",
									"\tpm.expect(jsonData).to.have.property(\"user\");",
									"\tpm.expect(jsonData).to.have.property(\"description\");",
									"\tpm.expect(jsonData).to.have.property(\"courses\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "host",
								"value": "http://localhost:3000",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{host}}/api/{{api_version}}/users/{{user_id}}/course-lists/{{course_list_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"users",
								"{{user_id}}",
								"course-lists",
								"{{course_list_id}}"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "403 - User attempts to get another user's courseList",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403 - not allowed to get courseList from another user\", () => {",
									"    pm.response.to.have.status(403);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "host",
								"value": "http://localhost:3000",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{host}}/api/{{api_version}}/users/{{user_id}}/course-lists/{{course_list_id2}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"users",
								"{{user_id}}",
								"course-lists",
								"{{course_list_id2}}"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "404 - Show courseList that does not exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"GET request status 404 - courseList does not exist\", () => {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "host",
								"value": "http://localhost:3000",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{host}}/api/{{api_version}}/users/{{user_id}}/course-lists/{{not_existing_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"users",
								"{{user_id}}",
								"course-lists",
								"{{not_existing_id}}"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "200 - User deletes courseList from self",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful DELETE request - status 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/{{api_version}}/users/{{user_id}}/course-lists/{{course_list_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"users",
								"{{user_id}}",
								"course-lists",
								"{{course_list_id}}"
							]
						},
						"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "403 - User attempts to delete another user's courseList",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"DELETE request status 403 - cannot delete another user's courseList\", () => {",
									"    pm.response.to.have.status(403);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/{{api_version}}/users/{{user_id}}/course-lists/{{course_list_id2}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"users",
								"{{user_id}}",
								"course-lists",
								"{{course_list_id2}}"
							]
						},
						"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "200 - Delete courselist using POST and query parameter _method=DELETE",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// {{host}}/api/{{api_version}}/users/{{user_id}}/course-lists",
									"const host = pm.environment.get('host');",
									"const apiVersion = pm.environment.get('api_version');",
									"const userId = pm.environment.get('user_id');",
									"const token = pm.environment.get('jwt_token');",
									"const courseListData = {",
									"\tname: 'Test courselist',",
									"\tdescription: 'A courselist to be deleted.',",
									"\tcourses: [],",
									"};",
									"",
									"pm.sendRequest({",
									"    url: `${host}/api/${apiVersion}/users/${userId}/course-lists`,",
									"\t\tmethod: 'POST',",
									"\t\theader: {",
									"\t\t\t'Content-Type': 'application/json',",
									"\t\t\t'Authorization': `Bearer ${token}`,",
									"\t\t},",
									"\t\tbody: {",
									"\t\t\tmode: 'raw',",
									"\t\t\traw: JSON.stringify(courseListData),",
									"\t\t}",
									"}, function (err, res) {",
									"\tif (err) {",
									"\t\tconsole.err('Failed to create course list, test can not succeed');",
									"\t}",
									"",
									"\tconst courseListId = res.json()._id;",
									"\tpm.environment.set(\"course_list_id\", courseListId);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful DELETE request - status 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{host}}/api/{{api_version}}/users/{{user_id}}/course-lists/{{course_list_id}}?_method=DELETE",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"users",
								"{{user_id}}",
								"course-lists",
								"{{course_list_id}}"
							],
							"query": [
								{
									"key": "_method",
									"value": "DELETE"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "404 - Get deleted courselist from method override test",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Unsuccessful GET request - status 404\", () => {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/api/{{api_version}}/users/{{user_id}}/course-lists/{{course_list_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"users",
								"{{user_id}}",
								"course-lists",
								"{{course_list_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Deletes in end",
			"item": [
				{
					"name": "200 - Admin deletes all users but admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"All users deleted - status 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/{{api_version}}/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"users"
							]
						},
						"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "200 - Admin deletes all courses",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/{{api_version}}/courses",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"courses"
							]
						},
						"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "404 - Admin deletes all courses again",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code 404 - no courses found to delete\", () => {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/{{api_version}}/courses",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"courses"
							]
						},
						"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "200 - Admin deletes all courseLists",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"DEL Status 200 - All courseLists deleted and also from all user's arrays\", () => {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/{{api_version}}/users/{{user_id}}/course-lists",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"users",
								"{{user_id}}",
								"course-lists"
							]
						},
						"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "id",
			"value": "1"
		},
		{
			"key": "base_url",
			"value": "https://postman-rest-api-learner.glitch.me/"
		}
	]
}